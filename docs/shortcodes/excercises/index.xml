<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing 2022-2</title><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/shortcodes/excercises/</link><description>Recent content on Visual Computing 2022-2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://andresrperez12.github.io/VisualComputing2022-2/docs/shortcodes/excercises/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/shortcodes/excercises/excercise1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/shortcodes/excercises/excercise1/</guid><description> Excercise 1 # Este es el inicio del ejercicio 1.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/shortcodes/excercises/excercise2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/shortcodes/excercises/excercise2/</guid><description> Excercise 2 # Excercise 2
Develop a terrain visualization application. Terrain Visualization Application # p5-global-iframe markdown {{&amp;lt; p5-global-iframe id=&amp;#34;breath&amp;#34; width=&amp;#34;625&amp;#34; height=&amp;#34;625&amp;#34; &amp;gt;}} var cols, rows; var scl = 20; var w = 1200; var h = 400; var zoff = 0; var inc = 0.1; var zinc = 0.02; var start = 0; var minVal = -50; var maxVal = 50; var startInc = 0; function setup() { createCanvas(800, 350, WEBGL); cols = w / scl; rows = h / scl; } function draw() { background(0); stroke(255); noFill(); rotateX(PI/3); translate(-w/2, -h/2); let yoff = -start; for (let y = 0; y &amp;lt; rows - 1; y++) { let xoff = 0; beginShape(TRIANGLE_STRIP); for (let x = 0; x &amp;lt; cols; x++) { vertex(x*scl, y*scl, map(noise(xoff,yoff,zoff), 0, 1, minVal, maxVal)); vertex(x*scl, (y+1)*scl, map(noise(xoff,yoff,zoff), 0, 1, minVal, maxVal)); xoff += inc; } yoff += inc; endShape(); } zoff += zinc; start += startInc; } {{&amp;lt; /p5-global-iframe &amp;gt;}}</description></item></channel></rss>