<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing 2022-2</title><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/</link><description>Recent content on Visual Computing 2022-2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/ColorMultiplicationExcercise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/ColorMultiplicationExcercise/</guid><description>Excercise 2 # Excercise 1
Let rgb1 and rgb2 be two rgb colors. What would rgb1 * rgb2 mean? Problem statement # Color may be specified through the use of 3 channels, namely : Red, Green and Blue. Given this archetype for defining colors in a quantitative manner, what would color multiplication mean?
Background # The magnitude of each selected channel is, normaly, standardized as a number between 0 and 255.</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/dither/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/dither/</guid><description>Excercise: Dithering # Excercise
Research some dither visual apps. Background # The basic notion for dithering is adding noise in random patterns of pixels to improve the image quality while avoiding banding. In graphics, banding is the visible change from one color to the next instead of a smooth transition in a color gradient.
Dithering adds random patterns of pixels to a digital file. One of the earlier uses of dithering was in black and white newspapers.</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/ImageProcessingExercise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/ImageProcessingExercise/</guid><description>Excercise - Image Processing # Excercise
Implement an image / video processing app supporting different masks, and:
A region-of-interest base tool to selectively apply a given mask. A magnifier tool Integrate luma Problem statement # How can we apply different masks to a media source via shaders? Is it possible to add features like a region of interest, magnifier tool and luma?
Background # Convolutions can be used as a general purpose filter effect that can be applied to an image or the frame of a video.</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/Lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/Lighting/</guid><description>Excercises: Lighting # Background # Lighting aims at modelling light interactions on different material types to simulate both, photorealistic and non-photorealistic scenes.
Ambient light # Excercise
Implement a scene having the following lighting equation: \mathbf{a} = ambient , ambient4a=ambientambient4, where ambient4ambient4 is the ambient light color. It should produce something like the sketch below: Code &amp;amp; Results # Code # Ambient light let easycam; let models; let modelsDisplayed; let lightShader; let ambient, ambient4; function preload() { lightShader = readShader(&amp;#39;/VisualComputing2022-2/docs/excercises/ambient_color.</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/Mosaic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/Mosaic/</guid><description>Excercise: Mosaic # Excercise
Implement a mosaic (or/and ascii art) visual application. Problem statement # Create an app that implements a mosaic or ascii art app.
Background # In the field of photographic imaging, a photographic mosaic, also known under the term Photomosaic, is a picture (usually a photograph) that has been divided into (usually equal sized) tiled sections, each of which is replaced with another photograph that matches the target photo.</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/Rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/Rasterization/</guid><description>Excercise: Rasterization # Excercise
Implement in software any of the following visualizations: primitive rasterization, color shading, z-depth and texture-mapping. Background # In computer graphics, rasterization is the task of taking an image described in a vector graphics format (shapes) and converting it into a raster image (a series of pixels, dots or lines, which, when displayed together, create the image which was represented via shapes). The rasterized image may then be displayed on a computer display, video display or printer, or stored in a bitmap file format.</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/SpatialCoherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/SpatialCoherence/</guid><description>Excercise # Excercise
Research spatial coherence visual applications. Problem statement # Light spatial coherence is a fenommenon of electromagnetic waves in which the correlation of amplitude values at different the wavefront are evaluated in order to determine and classify the current state of the wave thats being propagated. Does this affect color visualization?
Background # Temporal Coherence is a measure of the correlation of light wave’s phase at different points along the direction of propagation – it tells us how monochromatic a source is.</description></item><item><title/><link>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/TerrainVisualizationApplication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andresrperez12.github.io/VisualComputing2022-2/docs/excercises/TerrainVisualizationApplication/</guid><description>Excercise 2 # Excercise 2
Develop a terrain visualization application. Problem statement # Develop an application that allows visualizing terrain with Perlin noise
Background # Perling Noise: According to wikipedia, Perlin Noise is a mathematical function that uses interpolation between a large number of precalculated vector gradients that construct a value that varies pseudo-randomly in space or time. It resembles white noise, and is frequently used in computer-generated images to simulate variability in all kinds of phenomena, thus approaching a more natural appearance.</description></item></channel></rss>