[{"id":0,"href":"/VisualComputing2022-2/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":1,"href":"/VisualComputing2022-2/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":2,"href":"/VisualComputing2022-2/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":3,"href":"/VisualComputing2022-2/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":4,"href":"/VisualComputing2022-2/docs/excercises/","title":"Excercises","section":"Docs","content":" Excercises # En ésta sección podrás ver las entregas de los ejercicios del curso\nExcercises # Color Blend Modes Excercise Color Blending with shaders # Excercise 1 Let rgb1 and rgb2 be two rgb colors. through the use of shaders, implement various color blendmodes. Problem statement # Color blendmodes compute particular ways in which superposition of colors may be approached. explain and show how some of them can be applied through the use of vertex shaders and fragment shaders. Background # Vertex shaders and fragment shaders based programming paradigm through glsl is a great alternative for this problem. Color Multiplication Excercise Excercise 2 # Excercise 1 Let rgb1 and rgb2 be two rgb colors. What would rgb1 * rgb2 mean? Problem statement # Color may be specified through the use of 3 channels, namely : Red, Green and Blue. Given this archetype for defining colors in a quantitative manner, what would color multiplication mean? Background # The magnitude of each selected channel is, normaly, standardized as a number between 0 and 255. Dither Excercise: Dithering # Excercise Research some dither visual apps. Background # The basic notion for dithering is adding noise in random patterns of pixels to improve the image quality while avoiding banding. In graphics, banding is the visible change from one color to the next instead of a smooth transition in a color gradient. Dithering adds random patterns of pixels to a digital file. One of the earlier uses of dithering was in black and white newspapers. Image Processing Exercise Excercise - Image Processing # Excercise Implement an image / video processing app supporting different masks, and: A region-of-interest base tool to selectively apply a given mask. A magnifier tool Integrate luma Problem statement # How can we apply different masks to a media source via shaders? Is it possible to add features like a region of interest, magnifier tool and luma? Background # Convolutions can be used as a general purpose filter effect that can be applied to an image or the frame of a video. Lighting Excercises: Lighting # Background # Lighting aims at modelling light interactions on different material types to simulate both, photorealistic and non-photorealistic scenes. Ambient light # Excercise Implement a scene having the following lighting equation: \\mathbf{a} = ambient , ambient4a=ambientambient4, where ambient4ambient4 is the ambient light color. It should produce something like the sketch below: Code \u0026amp; Results # Code # Ambient light let easycam; let models; let modelsDisplayed; let lightShader; let ambient, ambient4; function preload() { lightShader = readShader(\u0026#39;/VisualComputing2022-2/docs/excercises/ambient_color. Mosaic Excercise: Mosaic # Excercise Implement a mosaic (or/and ascii art) visual application. Problem statement # Create an app that implements a mosaic or ascii art app. Background # In the field of photographic imaging, a photographic mosaic, also known under the term Photomosaic, is a picture (usually a photograph) that has been divided into (usually equal sized) tiled sections, each of which is replaced with another photograph that matches the target photo. Rasterization Excercise: Rasterization # Excercise Implement in software any of the following visualizations: primitive rasterization, color shading, z-depth and texture-mapping. Background # In computer graphics, rasterization is the task of taking an image described in a vector graphics format (shapes) and converting it into a raster image (a series of pixels, dots or lines, which, when displayed together, create the image which was represented via shapes). The rasterized image may then be displayed on a computer display, video display or printer, or stored in a bitmap file format. Spatial Coherence Excercise # Excercise Research spatial coherence visual applications. Problem statement # Light spatial coherence is a fenommenon of electromagnetic waves in which the correlation of amplitude values at different the wavefront are evaluated in order to determine and classify the current state of the wave thats being propagated. Does this affect color visualization? Background # Temporal Coherence is a measure of the correlation of light wave’s phase at different points along the direction of propagation – it tells us how monochromatic a source is. Terrain Visualization Application Excercise 2 # Excercise 2 Develop a terrain visualization application. Problem statement # Develop an application that allows visualizing terrain with Perlin noise Background # Perling Noise: According to wikipedia, Perlin Noise is a mathematical function that uses interpolation between a large number of precalculated vector gradients that construct a value that varies pseudo-randomly in space or time. It resembles white noise, and is frequently used in computer-generated images to simulate variability in all kinds of phenomena, thus approaching a more natural appearance. "},{"id":5,"href":"/VisualComputing2022-2/docs/excercises/ColorBlendModes/","title":"Color Blend Modes","section":"Excercises","content":" Excercise Color Blending with shaders # Excercise 1\nLet rgb1 and rgb2 be two rgb colors. through the use of shaders, implement various color blendmodes. Problem statement # Color blendmodes compute particular ways in which superposition of colors may be approached. explain and show how some of them can be applied through the use of vertex shaders and fragment shaders.\nBackground # Vertex shaders and fragment shaders based programming paradigm through glsl is a great alternative for this problem.Fragment shaders are one of the last steps in the rendering process and are executed in the GPU in parallelized manner.\nMost blendmodes are comprised of pixel-wise computation given the 2 colors in question, Given the independence of the calculations, this enables the GPU procedures to be carried on without race condition worries.\nIn the following application two color may be picked out of the color palette, one of 6 blendmode chosen and the alpha slider set to demonstrate different possible combinations. Namely, the blendmodes implemented are:\nAddition: as the name implies, both rgb values are simply summed up, easy way to produce lighter colors Difference: Analog to addition, rgb values are substracted, most color combinations will result in darkesr shades. Mutiply: RGB values are normalized and multiplied, will most likely end up in dark results Screen: The inverse of each color is multiplied with one another, inverse defined as 1-rgb_component. Lightest: The lightest color is superposed. Darkest: The darker color is superposed Code (solution) \u0026amp; results # App.js {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;410\u0026#34; height=\u0026#34;450\u0026#34; \u0026gt;}} let colorShader; let slider; function preload() { colorShader = readShader(\u0026#39;/VisualComputing2022-2/docs/excercises/color.frag\u0026#39;, { matrices: Tree.NONE, varyings: Tree.color4 }); } function setup() { // shaders require WEBGL mode to work createCanvas(400, 400, WEBGL); // Color pickers colorPickerA = createColorPicker(\u0026#39;yellow\u0026#39;); colorPickerA.position(5, 5); colorPickerB = createColorPicker(\u0026#39;cyan\u0026#39;); colorPickerB.position(80, 5); slider = createSlider(0, 255, 200); slider.position(160, 200); slider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); sel = createSelect(); sel.position(200, 10); sel.option(\u0026#39;ADD\u0026#39;); sel.option(\u0026#39;DIFFERENCE\u0026#39;); sel.option(\u0026#39;MULTIPLY\u0026#39;); sel.option(\u0026#39;SCREEN\u0026#39;); sel.option(\u0026#39;LIGHTEST\u0026#39;); sel.option(\u0026#39;DARKEST\u0026#39;); } function draw() { background(0); // Update the color variables in the shader updateShaderColors(); // Draw the two regular rectangles resetShader(); fill(colorPickerA.color()); rect(-150, -150, 100, 100); fill(colorPickerB.color()); rect(0, -150, 100, 100); // Draw with blend mode shader shader(colorShader); beginShape(); vertex(-0.25, -0.75); vertex(-0.25, -0.25); vertex(0.25, -0.25); vertex(0.25, -0.75); endShape(CLOSE); } function updateShaderColors(){ colorShader.setUniform(\u0026#39;colorA\u0026#39;, [ red(colorPickerA.color())/255, green(colorPickerA.color())/255, blue(colorPickerA.color())/255, alpha(colorPickerA.color())/255]); colorShader.setUniform(\u0026#39;colorB\u0026#39;, [ red(colorPickerB.color())/255, green(colorPickerB.color())/255, blue(colorPickerB.color())/255, alpha(colorPickerB.color())/255]); colorShader.setUniform(\u0026#39;alphaValue\u0026#39;, slider.value()/255.0); let item = 1; if( sel.value() == \u0026#39;ADD\u0026#39; ) item = 1; else if( sel.value() == \u0026#39;DIFFERENCE\u0026#39; ) item = 2; else if( sel.value() == \u0026#39;MULTIPLY\u0026#39; ) item = 3; else if( sel.value() == \u0026#39;SCREEN\u0026#39; ) item = 4; else if( sel.value() == \u0026#39;LIGHTEST\u0026#39; ) item = 5; else if( sel.value() == \u0026#39;DARKEST\u0026#39; ) item = 6; //print(item); colorShader.setUniform(\u0026#39;blendMode\u0026#39;, item); } {{\u0026lt; /p5-global-iframe \u0026gt;}} color.frag {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;410\u0026#34; height=\u0026#34;450\u0026#34; \u0026gt;}} precision mediump float; uniform vec4 colorA; uniform vec4 colorB; uniform float alphaValue; uniform int blendMode; // interpolated color is emitted from the vertex shader // where the variable is defined in the same exact way // see your console! varying vec4 color4; float luminosity(vec4 color) { return (color.r + color.g + color.b)/3.0; } void main() { if( blendMode == 1 ){ // ADD gl_FragColor = (colorA + colorB) * alphaValue; }else if( blendMode == 2 ){ // DIFFERENCE gl_FragColor = (colorA - colorB) * alphaValue; }else if( blendMode == 3 ){ // MULTIPLY gl_FragColor = colorA * colorB * alphaValue; }else if( blendMode == 4 ){ // SCREEN gl_FragColor = (vec4((vec3(1.0) - colorA.rgb), colorA.a) * vec4((vec3(1.0) - colorB.rgb), colorB.a)) * alphaValue; }else if( blendMode == 5 ){ // LIGHTEST if( luminosity(colorA) \u0026gt;= luminosity(colorB) ) gl_FragColor = colorA * alphaValue; else gl_FragColor = colorB * alphaValue; }else if( blendMode == 6 ){ // DARKEST if( luminosity(colorA) \u0026lt;= luminosity(colorB) ) gl_FragColor = colorA * alphaValue; else gl_FragColor = colorB * alphaValue; } } {{\u0026lt; /p5-global-iframe \u0026gt;}} Conclusions # There are a vast variety of color blendmodes, from simple ones like addition to more complex ones like screen blendmodes. Even these complex ones still are independent of vecinity or other possible dependences, this means each pixel can be always computed separately from the others. This important characteristic makes color shaders more than ideal to solve this kind of problems.\n"},{"id":6,"href":"/VisualComputing2022-2/docs/excercises/ColorMultiplicationExcercise/","title":"Color Multiplication Excercise","section":"Excercises","content":" Excercise 2 # Excercise 1\nLet rgb1 and rgb2 be two rgb colors. What would rgb1 * rgb2 mean? Problem statement # Color may be specified through the use of 3 channels, namely : Red, Green and Blue. Given this archetype for defining colors in a quantitative manner, what would color multiplication mean?\nBackground # The magnitude of each selected channel is, normaly, standardized as a number between 0 and 255. However, these values can easily be normalized between 0 to 1.\nColor multiplication can be defined as the color component-wise multiplication for each channel. Meaning, if we had pure yellow: RGB(255,255,0) and cyan blue: (0,255,255) we would first normalize them to (1,1,0) and (0,1,1) respectively; followed by their multiplication: 1*0 for red, 1*1 for green, and 0*1 for blue. The result would then be pure green color (0,1,0) or, equivalently: RGB(0,255,0)\nColor multiplication will, as a rule of thumb, yield a darker color than the two colors being multiplied. This is due to the fact two numbers from 0 to 1 are being multiplied per channel, the result per channel will always be less than or equal to the largest component.\nColor multiplication can be used to turn greyscale images to equivalent unicolorized images. In the example underneath, the greyscale portrait of a house determines the magnitude of the red channel in every pixel.\nCode (solution) \u0026amp; results # p5-global-iframe markdown {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;410\u0026#34; height=\u0026#34;450\u0026#34; \u0026gt;}} function setup() { createCanvas(400, 400); direction=\u0026#34;left\u0026#34; colorPickerLeft = createColorPicker(\u0026#39;yellow\u0026#39;); colorPickerLeft.position(0, height); colorPickerLeft.style(\u0026#39;width\u0026#39;,\u0026#39;200px\u0026#39;); colorPickerRight = createColorPicker(\u0026#39;rgb(0,255,255)\u0026#39;); colorPickerRight.position(width/2, height); colorPickerRight.style(\u0026#39;width\u0026#39;,\u0026#39;200px\u0026#39;); speed = 1; start = 0; } function draw() { blendMode(BLEND) background(\u0026#39;white\u0026#39;); blendMode(MULTIPLY); fill(colorPickerLeft.color()); square(start,150,100); if (direction == \u0026#34;right\u0026#34;){ start += speed if(start\u0026gt;=width/2) direction = \u0026#34;left\u0026#34; } else if (direction == \u0026#34;left\u0026#34;){ start -= speed if(start\u0026lt;=0) direction = \u0026#34;right\u0026#34; } fill(colorPickerRight.color()) square(width-start-100,150,100); } {{\u0026lt; /p5-global-iframe \u0026gt;}} Conclusions # Color multiplication is rather easy to define and implement, past this first convenient consensus, its utility is rather limited. In developed frameworks such as canva or p5, it has already been integrated as one of many possible blendmodes, however, its popularity suffers mainly because its heavy darkening effect for most colors than may happen to overlap.\n"},{"id":7,"href":"/VisualComputing2022-2/docs/excercises/dither/","title":"Dither","section":"Excercises","content":" Excercise: Dithering # Excercise\nResearch some dither visual apps. Background # The basic notion for dithering is adding noise in random patterns of pixels to improve the image quality while avoiding banding. In graphics, banding is the visible change from one color to the next instead of a smooth transition in a color gradient.\nDithering adds random patterns of pixels to a digital file. One of the earlier uses of dithering was in black and white newspapers. By using dithering, a gray scale could be simulated by placing black dots in specific locations. In web graphics, it is used to avoid banding whe working with reduced file sizes and color spaces. By mixing shades from a limited color space, it is possible to reduce the filse size while maintaining the perception of the original color.\nWhen used to reduce banding, the color gradient can be preserved even if in the reduced color space. The first image hasn\u0026rsquo;t been dithered and the banding is clearly visible:\nMeanwhile, the second image is perceived as a smooth trasnstion between the colors:\nDithering also reduces the sharpness of the image, and may introduce a noticeable grainy pattern. This is specially significant when a full color image is dithered into a 216-color browser-safe palette. If the user has their display set to 256 colors, web browsers will dither the image colors into the 216-color browser-safe color pallette. This is a very rare occurace nowdays, but it is still important to remmeber that a small percentage of users will see the colors after dithering.\nConclusions # Dithering is a very important tool in computer graphics. Understanding the limitations of the used color spaces and the display methods in which they are visualized is key for presenting a great version of your graphics to the greatest amount of users possible. For example, by adding dithered images to a website, both speed and accesibility can be improved by using a smaller image file size that still preserves a significant amount of the color perception of the original.\nReferences # What Is Dithering in Image Processing? by Lisa Mildon, Lifewire Dithering, Web Style Guide WHY YOUR WEBSITE SHOULD USE DITHERED IMAGES Colour Banding "},{"id":8,"href":"/VisualComputing2022-2/docs/excercises/ImageProcessingExercise/","title":"Image Processing Exercise","section":"Excercises","content":" Excercise - Image Processing # Excercise\nImplement an image / video processing app supporting different masks, and:\nA region-of-interest base tool to selectively apply a given mask. A magnifier tool Integrate luma Problem statement # How can we apply different masks to a media source via shaders? Is it possible to add features like a region of interest, magnifier tool and luma?\nBackground # Convolutions can be used as a general purpose filter effect that can be applied to an image or the frame of a video. It is defined as a matrix, that is used to determine the new value of each central pixel as a linear combination of its neighbors. In the case that the image has several channels, the operation is applied over each individual channel independently. This matrix is also known as a kernel.\nOne of the most common kernel sizes is 3x3. In this case, the central pixel value is calculated as a combination of itself, and the values of its 8 neighbors. Usually they are normalized by dividing by the total sum of the kernel, or by 1 if the sum is zero.\nA selection of important kernels were implemented with shaders for this exercise, including:\nGaussian Blur This effect reduces the amount of detail by blurring the image according to a gaussian function. Applying this kernel results in the same image as convolving the input with a Gaussian function. The formula for this functions in two dimensions is:\nThe 3x3 kernel for this efect is:\n1/16 2/16 1/16 2/16 4/16 2/16 1/16 2/16 1/16 Sharpening This effect accentuates the differences between the central pixel and its neighbors, resulting in a sharper, more vivid image.\nThe 3x3 kernel for this efect is:\n0 -1 0 -1 5 -1 0 -1 0 Edges (also know as ridges) This effect highlights significant diffetences with the neighboring pixels, resulting in a pixel very similar to its surroundings turning black, and one very different to its surroundings wil be vrey bright. In the resulting image, the outline of the objects is highlighted.\nThe 3x3 kernel for this efect is:\n-1 -1 -1 -1 8 -1 -1 -1 -1 Emboss This effect creates the illusion of depth by highlighting the diffence in pixels in a specific direction. For the standard kernel, this direction is taken from the top left to the bottom right.\nThe 3x3 kernel for this efect is:\n-2 -1 0 -1 1 1 0 1 2 Addtional features # Region of interest A region of interest feature can be directly implemented in the fragment shader. This feature allows a user to define where the kernel should me applied by moving the mouse and setting and action radius for the effect.\nMagnifier A magnifier effect can be applied from the fragment shader by using the passed texture as reference. The mouse position is used as a center and an action radius is defined. To magnify the image, a vector is calculated from the center (the mouse position) to each pixel, and the color returned is determined by reducing the magnitude of this vector while maintaining its position:\nCode (solution) \u0026amp; results # The different checkbox turn features on and off:\nThe video checkbox changes the source from an image to a video. The mask checkbox informs the shader if it should apply the mask chosen in the drop down menu. The luma checkbox changes the color mode to luma coloring brightness mode. The region of interest checkbox informs the shader that it should only apply the effect in the area around the mouse. The magnifier checkbox informs the shader that it should magnify the area around the mouse. The slider sets the radious for the region of interest and magnifier features, with a default value of 20% of the canvas. p5-global-iframe markdown let maskShader; let img; let vid; let video_checkbox; let mask_checkbox; let luma_checkbox; let roi_checkbox; let magnifier_checkbox; let radius_slider; function preload() { maskShader = readShader(\u0026#39;/shaders/mask.frag\u0026#39;, { varyings: Tree.texcoords2 }); // Load image and video files img = loadImage(\u0026#39;/media/image.jpg\u0026#39;); vid = createVideo(\u0026#39;media/videoSquare.mp4\u0026#39;,vidLoad); } function setup() { createCanvas(640, 640, WEBGL); noStroke(); // Set up video and hide it HTML element vid.hide(); vid.loop(); // Set up the shader textureMode(NORMAL); shader(maskShader); // Set up the checkboxes and slider video_checkbox = createCheckbox(\u0026#39;video\u0026#39;, false); video_checkbox.position(10, 10); video_checkbox.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); video_checkbox.input(uniformUpdate); mask_checkbox = createCheckbox(\u0026#39;mask\u0026#39;, false); mask_checkbox.position(10, 30); mask_checkbox.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); mask_checkbox.input(uniformUpdate); luma_checkbox = createCheckbox(\u0026#39;luma\u0026#39;, false); luma_checkbox.position(10, 50); luma_checkbox.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); luma_checkbox.input(uniformUpdate); roi_checkbox = createCheckbox(\u0026#39;Region of interest\u0026#39;, false); roi_checkbox.position(10, 70); roi_checkbox.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); roi_checkbox.input(uniformUpdate); magnifier_checkbox = createCheckbox(\u0026#39;Magnifier\u0026#39;, false); magnifier_checkbox.position(10, 90); magnifier_checkbox.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); magnifier_checkbox.input(uniformUpdate); radius_slider = createSlider(0, 100, 20); radius_slider.position(10, 110); radius_slider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); // Masl selector sel = createSelect(); sel.position(500,10); sel.option(\u0026#39;Gaussian blur\u0026#39;); sel.option(\u0026#39;Sharpening\u0026#39;); sel.option(\u0026#39;Edges\u0026#39;); sel.option(\u0026#39;Emboss\u0026#39;); sel.input(uniformUpdate); // Initialize mask uniformUpdate(); } function draw() { background(0); quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); // Send mouse position and radius in every frame maskShader.setUniform(\u0026#39;mouse\u0026#39;, [mouseX/width, mouseY/height]); maskShader.setUniform(\u0026#39;actionRadius\u0026#39;, radius_slider.value()/100.0); } function vidLoad() { // Play the video vid.loop(); vid.volume(0); } function uniformUpdate(){ // Media source if(video_checkbox.checked()){ maskShader.setUniform(\u0026#39;texture\u0026#39;, vid); maskShader.setUniform(\u0026#39;texOffset\u0026#39;, [1 / vid.width, 1 / vid.height]) }else{ maskShader.setUniform(\u0026#39;texture\u0026#39;, img); maskShader.setUniform(\u0026#39;texOffset\u0026#39;, [1 / img.width, 1 / img.height]) } // Mask application maskShader.setUniform(\u0026#39;apply_mask\u0026#39;,mask_checkbox.checked()); // Luma application maskShader.setUniform(\u0026#39;luma\u0026#39;,luma_checkbox.checked()); // Mask selection if( sel.value() == \u0026#39;Gaussian blur\u0026#39; ){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [1.0/16.0,2.0/16.0,1.0/16.0, 2.0/16.0,4.0/16.0,2.0/16.0, 1.0/16.0,2.0/16.0,1.0/16.0]); }else if( sel.value() == \u0026#39;Sharpening\u0026#39; ){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [0.0,-1.0,0.0, -1.0,5.0,-1.0, 0.0,-1.0,0.0]); }else if( sel.value() == \u0026#39;Edges\u0026#39; ){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [-1.0,-1.0,-1.0, -1.0,8.0,-1.0, -1.0,-1.0,-1.0,]); }else if( sel.value() == \u0026#39;Emboss\u0026#39; ){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [-2.0,-1.0,0.0, -1.0,1.0,1.0, 0.0,1.0,2.0]); } // Region of interest maskShader.setUniform(\u0026#39;roi\u0026#39;,roi_checkbox.checked()); // Magnifier maskShader.setUniform(\u0026#39;magnifier\u0026#39;,magnifier_checkbox.checked()); } mask.frag precision mediump float; // uniforms are defined and sent by the sketch uniform sampler2D texture; // interpolated texcoord (same name and type as in vertex shader) varying vec2 texcoords2; uniform vec2 texOffset; uniform vec2 mouse; // holds the 3x3 kernel uniform float mask[9]; uniform bool apply_mask; uniform bool luma; uniform bool roi; uniform bool magnifier; // Magnifier zoom const float Zoom = 2.0; // Radius for magnifier/region of interest uniform float actionRadius; float lumaFunction(vec3 texel) { return 0.299 * texel.r + 0.587 * texel.g + 0.114 * texel.b; } vec4 magnifiedTexture(sampler2D currTexture, vec2 point){ // Returns the color at the point after applying the maginifier operations if needed if(magnifier \u0026amp;\u0026amp; distance(point,mouse) \u0026lt;= actionRadius){ vec2 centerVector = point-mouse; centerVector = (1.0/Zoom) * centerVector; return texture2D(currTexture,mouse+centerVector); } return texture2D(currTexture,point); } void main() { if(apply_mask \u0026amp;\u0026amp; (roi == false || distance(texcoords2,mouse) \u0026lt;= actionRadius)){ // 1. Use offset to move along texture space. // In this case to find the texcoords of the texel neighbours. vec2 tc0 = texcoords2 + vec2(-texOffset.s, -texOffset.t); vec2 tc1 = texcoords2 + vec2( 0.0, -texOffset.t); vec2 tc2 = texcoords2 + vec2(+texOffset.s, -texOffset.t); vec2 tc3 = texcoords2 + vec2(-texOffset.s, 0.0); // origin (current fragment texcoords) vec2 tc4 = texcoords2 + vec2( 0.0, 0.0); vec2 tc5 = texcoords2 + vec2(+texOffset.s, 0.0); vec2 tc6 = texcoords2 + vec2(-texOffset.s, +texOffset.t); vec2 tc7 = texcoords2 + vec2( 0.0, +texOffset.t); vec2 tc8 = texcoords2 + vec2(+texOffset.s, +texOffset.t); // 2. Sample texel neighbours within the rgba array vec4 rgba[9]; rgba[0] = magnifiedTexture(texture, tc0); rgba[1] = magnifiedTexture(texture, tc1); rgba[2] = magnifiedTexture(texture, tc2); rgba[3] = magnifiedTexture(texture, tc3); rgba[4] = magnifiedTexture(texture, tc4); rgba[5] = magnifiedTexture(texture, tc5); rgba[6] = magnifiedTexture(texture, tc6); rgba[7] = magnifiedTexture(texture, tc7); rgba[8] = magnifiedTexture(texture, tc8); // 3. Apply convolution kernel vec4 convolution = vec4(0.0,0.0,0.0,0.0); for (int i = 0; i \u0026lt; 9; i++) { convolution += rgba[i]*mask[i]; } gl_FragColor = convolution; }else{ gl_FragColor = magnifiedTexture(texture, texcoords2); } // Apply Luma if(luma){ gl_FragColor = vec4((vec3(lumaFunction(gl_FragColor.rgb))), 1.0); } } Conclusions # Shaders provide a lot of flexibility to work with image convolutions, specially when managing several textures at the same time. By giving access to our complete texture in the fragment shader, we can create powerful tools to be used from p5 and other processing languages. Convolutions are an efficient way to create impactful visual effects, and by implementing them via shaders, they are very flexible and can be applied to different objects and areas independently.\nIn terms of future work, creating methods that allow and easier way to pass kernels as uniforms to the fragment shader, and to use them in a more simple manner in glsl would allow for more efficient development of features that use them in p5. Addtionally, these notable kernels could be pre-implemented in a library so that their use in both p5 and the fragment shader would be more direct.\nReferences # Convolution by Song Ho Ahn Image Convolution by Jamie Ludwig, Portland State University Gaussian blur Image Kernels Explained Visually by Victor Powell Sample Magnifier by valdis, Shadertoy Female Hiker Walking With Backpack Through Tropical Rain Forest., Videezy "},{"id":9,"href":"/VisualComputing2022-2/docs/excercises/Lighting/","title":"Lighting","section":"Excercises","content":" Excercises: Lighting # Background # Lighting aims at modelling light interactions on different material types to simulate both, photorealistic and non-photorealistic scenes.\nAmbient light # Excercise\nImplement a scene having the following lighting equation: \\mathbf{a} = ambient , ambient4a=ambientambient4, where ambient4ambient4 is the ambient light color. It should produce something like the sketch below: Code \u0026amp; Results # Code # Ambient light let easycam; let models; let modelsDisplayed; let lightShader; let ambient, ambient4; function preload() { lightShader = readShader(\u0026#39;/VisualComputing2022-2/docs/excercises/ambient_color.frag\u0026#39;, { varyings: Tree.NONE }); } function setup() { createCanvas(500, 500, WEBGL); textureMode(NORMAL); noStroke(); setAttributes(\u0026#39;antialias\u0026#39;, true); let state = { distance: 300, center: [0, 0, 0], rotation: [-0.285, -0.257, -0.619, 0.685], }; console.log(Dw.EasyCam.INFO); easycam = new Dw.EasyCam(this._renderer); easycam.state_reset = state; // state to use on reset (double-click/tap) easycam.setState(state, 2000); // now animate to that state document.oncontextmenu = function () { return false; } colorMode(RGB, 1); let trange = 100; models = []; for (let i = 0; i \u0026lt; 100; i++) { models.push( { position: createVector((random() * 2 - 1) * trange, (random() * 2 - 1) * trange, (random() * 2 - 1) * trange), size: random() * 25 + 8, color: color(random(), random(), random()) } ); } modelsDisplayed = createSlider(1, models.length, int(models.length / 4), 1); modelsDisplayed.position(10, 10); modelsDisplayed.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); ambient = createSlider(0, 1, 0.5, 0.05); ambient.position(420, 10); ambient.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); ambient.input(() =\u0026gt; { lightShader.setUniform(\u0026#39;ambient\u0026#39;, ambient.value()) }); shader(lightShader); lightShader.setUniform(\u0026#39;ambient\u0026#39;, ambient.value()); ambient4 = createColorPicker(\u0026#39;white\u0026#39;); ambient4.position(420, 45); ambient4.input(() =\u0026gt; { let ambient4Color = ambient4.color(); lightShader.setUniform(\u0026#39;ambient4\u0026#39;, [red(ambient4Color) / 255, green(ambient4Color) / 255, blue(ambient4Color) / 255, 1]); }); lightShader.setUniform(\u0026#39;ambient4\u0026#39;, [1, 1, 1, 1]); } function draw() { background(0); push(); stroke(\u0026#39;green\u0026#39;); axes(); grid(); pop(); for (let i = 0; i \u0026lt; modelsDisplayed.value(); i++) { push(); fill(models[i].color); translate(models[i].position); let radius = models[i].size / 2; i % 3 === 0 ? box(radius * 2) : i % 3 === 1 ? sphere(radius) : torus(radius, radius / 4); pop(); } } Execution # Toon shading # Excercise\nTweak the above diffuse shader to implement a toon shading scene. It should produce something like the sketch below: Code \u0026amp; Results # Code # Toon shading \u0026#39;use strict\u0026#39;; let easycam; let models; let modelsDisplayed; let lightShader; let depth, ambient4; function preload() { lightShader = readShader(\u0026#39;/VisualComputing2022-2/docs/excercises/toon.frag\u0026#39;, { varyings: Tree.normal3 }); } function setup() { createCanvas(500, 500, WEBGL); colorMode(RGB, 1); textureMode(NORMAL); noStroke(); setAttributes(\u0026#39;antialias\u0026#39;, true); let state = { distance: 300, center: [0, 0, 0], rotation: [-0.285, -0.257, -0.619, 0.685], }; console.log(Dw.EasyCam.INFO); easycam = new Dw.EasyCam(this._renderer); //easycam.attachMouseListeners(this._renderer); easycam.state_reset = state; // state to use on reset (double-click/tap) easycam.setState(state, 2000); // now animate to that state // suppress right-click context menu document.oncontextmenu = function () { return false; } let trange = 100; models = []; for (let i = 0; i \u0026lt; 100; i++) { models.push( { position: createVector((random() * 2 - 1) * trange, (random() * 2 - 1) * trange, (random() * 2 - 1) * trange), angle: random(0, TWO_PI), axis: p5.Vector.random3D(), size: random() * 25 + 8, color: color(random(), random(), random()) } ); } // gui modelsDisplayed = createSlider(1, models.length, int(models.length / 4), 1); modelsDisplayed.position(10, 10); modelsDisplayed.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); depth = createSlider(-1, 1, -0.4, 0.05); depth.position(420, 10); depth.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); shader(lightShader); lightShader.setUniform(\u0026#39;ambient\u0026#39;, depth.value()); ambient4 = createColorPicker(\u0026#39;white\u0026#39;); ambient4.position(420, 45); ambient4.input(() =\u0026gt; { let ambient4Color = ambient4.color(); lightShader.setUniform(\u0026#39;ambient4\u0026#39;, [red(ambient4Color) / 255, green(ambient4Color) / 255, blue(ambient4Color) / 255, 1]); }); lightShader.setUniform(\u0026#39;ambient4\u0026#39;, [1, 1, 1, 1]); } function draw() { background(0); let dirX = (mouseX / width - 0.5) * 2; let dirY = (mouseY / height - 0.5) * 2; lightShader.setUniform(\u0026#39;lightNormal\u0026#39;, createVector(-dirX, -dirY, depth.value()).array()); push(); stroke(\u0026#39;green\u0026#39;); axes(); grid(); pop(); for (let i = 0; i \u0026lt; modelsDisplayed.value(); i++) { push(); fill(models[i].color); translate(models[i].position); rotate(models[i].angle, models[i].axis); let radius = models[i].size / 2; i % 3 === 0 ? cone(radius) : i % 3 === 1 ? sphere(radius) : torus(radius, radius / 4); pop(); } } Execution # Specular reflection # Excercise\nImplement a specular reflection scene producing a result like the sketch below: Code \u0026amp; Results # Code # Specular reflection \u0026#39;use strict\u0026#39;; let easycam; let models; let modelsDisplayed; let lightShader; let ambient /*, ambient4*/; let point_light; let lightPath; function preload() { lightShader = readShader(\u0026#39;/VisualComputing2022-2/docs/excercises/specular.frag\u0026#39;, { varyings: Tree.normal3 | Tree.position4 }); } function setup() { createCanvas(500, 500, WEBGL); noLights(); colorMode(RGB, 1); setAttributes(\u0026#39;antialias\u0026#39;, true); // define initial state let state = { distance: 300, center: [0, 0, 0], rotation: [-0.285, -0.257, -0.619, 0.685], }; console.log(Dw.EasyCam.INFO); easycam = new Dw.EasyCam(this._renderer); easycam.state_reset = state; // state to use on reset (double-click/tap) easycam.setState(state, 2000); // now animate to that state document.oncontextmenu = function () { return false; } // models let trange = 100; models = []; for (let i = 0; i \u0026lt; 100; i++) { models.push( { position: createVector((random() * 2 - 1) * trange, (random() * 2 - 1) * trange, (random() * 2 - 1) * trange), size: random() * 25 + 8, color: color(random(), random(), random()) } ); } // light point_light = {}; // gui modelsDisplayed = createSlider(1, models.length, int(models.length / 4), 1); modelsDisplayed.position(10, 10); modelsDisplayed.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); ambient = createSlider(0, 1, 0.2, 0.05); ambient.position(420, 10); ambient.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); ambient.input(() =\u0026gt; { lightShader.setUniform(\u0026#39;ambient\u0026#39;, ambient.value()) }); shader(lightShader); lightShader.setUniform(\u0026#39;ambient\u0026#39;, ambient.value()); lightPath = createSelect(); lightPath.position(10, 40); //lightPath.option(\u0026#39;0\u0026#39;); lightPath.option(\u0026#39;1\u0026#39;); lightPath.option(\u0026#39;2\u0026#39;); lightPath.option(\u0026#39;3\u0026#39;); lightPath.selected(\u0026#39;1\u0026#39;); } function draw() { background(0); let pointLight = updatePointLight(); resetShader(); push(); stroke(\u0026#39;green\u0026#39;); axes(); grid(); pop(); push(); translate(pointLight.position); noStroke(); //fill(point_light.color); fill(\u0026#39;white\u0026#39;); sphere(3); pop(); shader(lightShader); lightShader.setUniform(\u0026#39;uLightPosition\u0026#39;, treeLocation(pointLight.position, { from: Tree.WORLD, to: Tree.EYE }).array()); for (let i = 0; i \u0026lt; modelsDisplayed.value(); i++) { push(); noStroke(); fill(models[i].color); translate(models[i].position); let radius = models[i].size / 2; i % 3 === 0 ? box(radius * 2) : i % 3 === 1 ? sphere(radius) : torus(radius, radius / 4); pop(); } } function updatePointLight() { //if (lightPath.value() === \u0026#39;0\u0026#39;) return; let angle = frameCount * 0.03; let rad = 30; let px = cos(angle) * rad; let py = sin(angle) * rad; let r = (sin(angle) * 0.5 + 0.5); let g = (sin(angle * 0.5 + PI / 2) * 0.5 + 0.5); let b = (sin(frameCount * 0.02) * 0.5 + 0.5); let pz = sin(frameCount * 0.02); return { position: lightPath.value() === \u0026#39;1\u0026#39; ? createVector(px, py, 0) : lightPath.value() === \u0026#39;2\u0026#39; ? createVector(50, 50, pz * 40) : createVector(-50, -50, -pz * 40), color: lightPath.value() === \u0026#39;1\u0026#39; ? color(1 - r, r / 2, r) : lightPath.value() === \u0026#39;2\u0026#39; ? color(r, 1, g) : color(1, r, g) }; } Execution # Conclusions # References # Visual Computing - Lighting p5.EasyCam - Random Boxes Examples "},{"id":10,"href":"/VisualComputing2022-2/docs/excercises/Mosaic/","title":"Mosaic","section":"Excercises","content":" Excercise: Mosaic # Excercise\nImplement a mosaic (or/and ascii art) visual application. Problem statement # Create an app that implements a mosaic or ascii art app.\nBackground # In the field of photographic imaging, a photographic mosaic, also known under the term Photomosaic, is a picture (usually a photograph) that has been divided into (usually equal sized) tiled sections, each of which is replaced with another photograph that matches the target photo. Reference\nASCII art is a graphic design technique that uses computers for presentation and consists of pictures pieced together from the 95 printable (from a total of 128) characters defined by the ASCII Standard from 1963 and ASCII compliant character sets with proprietary extended characters (beyond the 128 characters of standard 7-bit ASCII).Reference\nCode (solution) \u0026amp; results # For the development of this solution, it was based on the tutorial of Professor Daniel Shiffman. Below you can see, the code that transforms an image into ascii characters\nMosaic Visualization App Code // Image to ASCII // Adapted from: The Coding Train / Daniel Shiffman // https://thecodingtrain.com/CodingChallenges/166-ascii-image.html let density = \u0026#39;Ñ@#W$9876543210?!abc;:+=-,._ \u0026#39;; let image1; let selBg; let bg = { bg: 0, color: 255} let densityBtn; let dStatus = true; function preload() { image1 = loadImage(\u0026#39;../../../media/chess48.jpg\u0026#39;); } function setup() { createCanvas(400, 400); selBg = createSelect(); selBg.position(10,30); selBg.option(\u0026#39;Dark\u0026#39;); selBg.option(\u0026#39;Light\u0026#39;); selBg.option(\u0026#39;Green\u0026#39;); selBg.changed(selBgEvent); densityBtn = createButton(\u0026#39;density\u0026#39;); densityBtn.position(10, 5); densityBtn.mousePressed(changeDensity); } function changeDensity() { dStatus = !dStatus if (dStatus) { density = \u0026#39;$@B%8\u0026amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft;:+=-,._ \u0026#39; } else { density = \u0026#39;Ñ@#W$9876543210?!abc;:+=-,._ \u0026#39; } } function selBgEvent() { let opt = selBg.value(); if (opt == \u0026#39;Light\u0026#39;) { bg.bg = 255; bg.color = 0; } else if (opt == \u0026#39;Dark\u0026#39;) { bg.bg = 0; bg.color = 255; } else { bg.bg = 0; bg.color = [0,255,0]; } } function draw() { background(bg.bg); image(image1, 350, 0); let w = width / image1.width; let h = height / image1.height; image1.loadPixels(); for (let i = 0; i \u0026lt; image1.width; i++) { for (let j = 0; j \u0026lt; image1.height; j++) { const pixelIndex = (i + j * image1.width) * 4; const r = image1.pixels[pixelIndex + 0]; const g = image1.pixels[pixelIndex + 1]; const b = image1.pixels[pixelIndex + 2]; const avg = (r + g + b) / 3; noStroke(); fill(bg.color) const len = density.length; const charIndex = floor(map(avg,0,255,len,0)); textSize(w); textAlign(CENTER, CENTER); text(density.charAt(charIndex), i * w + w * 0.5, j * h + h * 0.5); } } } Conclusions # TODO\n"},{"id":11,"href":"/VisualComputing2022-2/docs/excercises/Rasterization/","title":"Rasterization","section":"Excercises","content":" Excercise: Rasterization # Excercise\nImplement in software any of the following visualizations: primitive rasterization, color shading, z-depth and texture-mapping. Background # In computer graphics, rasterization is the task of taking an image described in a vector graphics format (shapes) and converting it into a raster image (a series of pixels, dots or lines, which, when displayed together, create the image which was represented via shapes). The rasterized image may then be displayed on a computer display, video display or printer, or stored in a bitmap file format. Rasterization may refer to the technique of drawing 3D models, or the conversion of 2D rendering primitives such as polygons, line segments into a rasterized format.\nCode \u0026amp; Results # Primitive Rasterization # Code # Primitive Rasterization Code const rows = [0, 0, 0]; const cols = [0, 0, 0]; const colors = [0, 0, 0]; const ROWS = 20; const COLS = 20; const LENGTH = 23; let quadrille; function setup() { createCanvas(COLS * LENGTH, ROWS * LENGTH); quadrille = createQuadrille(20,20); generateNewRandomTriangle(); } function draw() { background(\u0026#39;white\u0026#39;); drawQuadrille(quadrille, {cellLength: LENGTH, outlineWeight: 1, outline: \u0026#39;gray\u0026#39;, board: true}); push(); stroke(\u0026#39;blue\u0026#39;); strokeWeight(3); noFill(); triangle(cols[0]*LENGTH + LENGTH/2, rows[0]*LENGTH + LENGTH/2, cols[1]*LENGTH + LENGTH/2, rows[1]*LENGTH + LENGTH/2, cols[2]*LENGTH + LENGTH/2, rows[2]*LENGTH + LENGTH/2); pop(); } function keyPressed() { generateNewRandomTriangle(); } function generateNewRandomTriangle() { rows[0] = int(random(0, ROWS)); cols[0] = int(random(0, COLS)); rows[1] = int(random(0, ROWS)); cols[1] = int(random(0, COLS)); rows[2] = int(random(0, ROWS)); cols[2] = int(random(0, COLS)); quadrille.clear(); quadrille.colorizeTriangle(rows[0], cols[0], rows[1], cols[1], rows[2], cols[2], \u0026#39;green\u0026#39;); } Execution # (click on the canvas and press any key) Color Shading # Code # Color Shading Code const rows = [0, 0, 0]; const cols = [0, 0, 0]; const colors = [0, 0, 0]; const ROWS = 20; const COLS = 20; const LENGTH = 23; let quadrille; function setup() { createCanvas(COLS * LENGTH, ROWS * LENGTH); quadrille = createQuadrille(20, 20); colors[0] = createColorPicker(color(\u0026#39;yellow\u0026#39;)); colors[1] = createColorPicker(color(\u0026#39;blue\u0026#39;)); colors[2] = createColorPicker(color(\u0026#39;red\u0026#39;)); colors[0].position(10, 10); colors[1].position(10, 40); colors[2].position(10, 70); colors[0].input(() =\u0026gt; { quadrille.colorizeTriangle(rows[0], cols[0], rows[1], cols[1], rows[2], cols[2], colors[0].color(), colors[1].color(), colors[2].color()) }); colors[1].input(() =\u0026gt; { quadrille.colorizeTriangle(rows[0], cols[0], rows[1], cols[1], rows[2], cols[2], colors[0].color(), colors[1].color(), colors[2].color()) }); colors[2].input(() =\u0026gt; { quadrille.colorizeTriangle(rows[0], cols[0], rows[1], cols[1], rows[2], cols[2], colors[0].color(), colors[1].color(), colors[2].color()) }); generateNewRandomTriangle(); } function draw() { background(\u0026#39;#white\u0026#39;); drawQuadrille(quadrille, { cellLength: LENGTH, outlineWeight: 1, outline: \u0026#39;gray\u0026#39;, board: true }); push(); stroke(\u0026#39;blue\u0026#39;); strokeWeight(3); noFill(); triangle(cols[0] * LENGTH + LENGTH / 2, rows[0] * LENGTH + LENGTH / 2, cols[1] * LENGTH + LENGTH / 2, rows[1] * LENGTH + LENGTH / 2, cols[2] * LENGTH + LENGTH / 2, rows[2] * LENGTH + LENGTH / 2); pop(); } function keyPressed() { generateNewRandomTriangle(); } function generateNewRandomTriangle() { rows[0] = int(random(0, ROWS)); cols[0] = int(random(0, COLS)); rows[1] = int(random(0, ROWS)); cols[1] = int(random(0, COLS)); rows[2] = int(random(0, ROWS)); cols[2] = int(random(0, COLS)); quadrille.clear(); quadrille.colorizeTriangle(rows[0], cols[0], rows[1], cols[1], rows[2], cols[2], colors[0].color(), colors[1].color(), colors[2].color()); } Execution # (click on the canvas and press any key) Texture Mapping # Code # Texture Mapping Code const rows = [0, 0, 0]; const cols = [0, 0, 0]; const colors = [0, 0, 0]; const u = [0, 0, 0]; const v = [0, 0, 0]; const ROWS = 20; const COLS = 20; let LENGTH; let quadrille; let pg2, pg1; let img; function preload() { img = loadImage(\u0026#39;https://nationaltoday.com/wp-content/uploads/2021/05/Turtle-1.jpg\u0026#39;); } function setup() { createCanvas(700, 350); pg1 = createGraphics(width / 2, height); pg2 = createGraphics(width / 2, height); LENGTH = width / (COLS * 2); quadrille = createQuadrille(20, 20); colors[0] = createColorPicker(color(\u0026#39;yellow\u0026#39;)); colors[1] = createColorPicker(color(\u0026#39;blue\u0026#39;)); colors[2] = createColorPicker(color(\u0026#39;red\u0026#39;)); colors[0].position(10, 10); colors[1].position(10, 40); colors[2].position(10, 70); pg2.rectMode(CENTER); img.resize(pg2.width, pg2.height); generateNewRandomTriangle(); } function draw() { pg1.background(\u0026#39;white\u0026#39;); drawQuadrille(quadrille, { graphics: pg1, cellLength: LENGTH, outlineWeight: 1, outline: \u0026#39;gray\u0026#39;, board: true }); pg1.push(); pg1.stroke(\u0026#39;blue\u0026#39;); pg1.strokeWeight(3); pg1.noFill(); pg1.triangle(cols[0] * LENGTH + LENGTH / 2, rows[0] * LENGTH + LENGTH / 2, cols[1] * LENGTH + LENGTH / 2, rows[1] * LENGTH + LENGTH / 2, cols[2] * LENGTH + LENGTH / 2, rows[2] * LENGTH + LENGTH / 2); pg1.fill(colors[0].color()); pg1.rect(cols[0] * LENGTH, rows[0] * LENGTH, LENGTH); pg1.fill(colors[1].color()); pg1.rect(cols[1] * LENGTH, rows[1] * LENGTH, LENGTH); pg1.fill(colors[2].color()); pg1.rect(cols[2] * LENGTH, rows[2] * LENGTH, LENGTH); pg1.pop(); image(pg1, 0, 0); pg2.image(img, 0, 0); pg2.push(); pg2.stroke(\u0026#39;white\u0026#39;); pg2.strokeWeight(3); pg2.noFill(); pg2.triangle(u[0], v[0], u[1], v[1], u[2], v[2]); pg2.fill(colors[0].color()); pg2.rect(u[0], v[0], LENGTH); pg2.fill(colors[1].color()); pg2.rect(u[1], v[1], LENGTH); pg2.fill(colors[2].color()); pg2.rect(u[2], v[2], LENGTH); pg2.pop(); image(pg2, width / 2, 0); } function keyPressed() { generateNewRandomTriangle(); } function generateNewRandomTriangle() { u[0] = int(random(0, img.width)); v[0] = int(random(0, img.height)); u[1] = int(random(0, img.width)); v[1] = int(random(0, img.height)); u[2] = int(random(0, img.width)); v[2] = int(random(0, img.height)); rows[0] = round(map(v[0], 0, img.height, 0, COLS)); cols[0] = round(map(u[0], 0, img.width, 0, ROWS)); rows[1] = round(map(v[1], 0, img.height, 0, COLS)); cols[1] = round(map(u[1], 0, img.width, 0, ROWS)); rows[2] = round(map(v[2], 0, img.height, 0, COLS)); cols[2] = round(map(u[2], 0, img.width, 0, ROWS)); quadrille.clear(); img.loadPixels(); quadrille.rasterizeTriangle(rows[0], cols[0], rows[1], cols[1], rows[2], cols[2], texturize, [u[0], v[0]], [u[1], v[1]], [u[2], v[2]] ); } function texturize({ pattern: texcoords2 }) { let index = 4 * (int(texcoords2[1]) * img.width + int(texcoords2[0])); return color(img.pixels[index], img.pixels[index + 1], img.pixels[index + 2]); } Execution # (click on the canvas and press any key) Z-Depth # Code # Z-Depth Code let easycam; let depth_map; let depthShader; let near, far; function preload() { depthShader = loadShader(\u0026#39;/VisualComputing2022-2/docs/excercises/shader.vert\u0026#39;, \u0026#39;/VisualComputing2022-2/docs/excercises/depthmap.frag\u0026#39;); } function setup() { pixelDensity(1); createCanvas(400, 400, WEBGL); setAttributes(\u0026#39;antialias\u0026#39;, true); let state = { distance: 164.411, center: [0, 0, 0], rotation: [-0.285, -0.257, -0.619, 0.685], }; near = 1; far = 500; easycam = new Dw.EasyCam(this._renderer); easycam.state_reset = state; easycam.setState(state, 2000); depth_map = false; } function keyPressed() { toggleShader(); } function toggleShader() { depth_map = !depth_map; if (depth_map) { shader(depthShader); depthShader.setUniform(\u0026#39;near\u0026#39;, near); depthShader.setUniform(\u0026#39;far\u0026#39;, far); } else { resetShader(); } } function windowResized() { resizeCanvas(windowWidth, windowHeight); easycam.setViewport([0, 0, windowWidth, windowHeight]); } let m4_camera = new p5.Matrix(); let m3_camera = new p5.Matrix(\u0026#39;mat3\u0026#39;); function backupCameraMatrix() { m4_camera.set(easycam.renderer.uMVMatrix); m3_camera.inverseTranspose(m4_camera); } let matWhite = { diff: [1, 1, 1], spec: [1, 1, 1], spec_exp: 400.0, }; let ambientlight = { col: [0.0002, 0.0004, 0.0006], }; let directlights = [ { dir: [-1, -1, -2], col: [0.0010, 0.0005, 0.00025], }, ]; function draw() { if (!depth_map) { backupCameraMatrix(); let angle = frameCount * 0.03; let rad = 30; let px = cos(angle) * rad; let py = sin(angle) * rad; let r = (sin(angle) * 0.5 + 0.5); let g = (sin(angle * 0.5 + PI / 2) * 0.5 + 0.5); let b = (sin(frameCount * 0.02) * 0.5 + 0.5); let pz = sin(frameCount * 0.02); let pointlights = [ { pos: [px, py, 0, 1], col: [1 - r, r / 2, r], att: 80, }, { pos: [50, 50, pz * 40, 1], col: [r, 1, g], att: 80, }, { pos: [-50, -50, -pz * 40, 1], col: [1, r, g], att: 80, }, ]; setAmbientlight(ambientlight); setDirectlight(directlights); setPointlight(pointlights); push(); for (let i = 0; i \u0026lt; pointlights.length; i++) { let pl = pointlights[i]; push(); translate(pl.pos[0], pl.pos[1], pl.pos[2]); emissiveMaterial(pl.col[0] * 255, pl.col[1] * 255, pl.col[2] * 255); fill(pl.col[0] * 255, pl.col[1] * 255, pl.col[2] * 255); sphere(3); pop(); } pop(); } perspective(60 * PI / 180, width / height, near, far); background(255); noStroke(); rand.seed = 0; let count = 100; let trange = 100; for (let i = 0; i \u0026lt; count; i++) { let dx = rand() * 25 + 8; let tx = (rand() * 2 - 1) * trange; let ty = (rand() * 2 - 1) * trange; let tz = (rand() * 2 - 1) * trange; push(); translate(tx, ty, tz); box(dx); pop(); } } let rand = function () { this.x = ++rand.seed; this.y = ++rand.seed; let val = Math.sin(this.x * 12.9898 + this.y * 78.233) * 43758.545; return (val - Math.floor(val)); } rand.seed = 0; function setAmbientlight(ambientlight) { ambientLight(ambientlight.col[0] * 255, ambientlight.col[1] * 255, ambientlight.col[2] * 255); } function setDirectlight(directlights) { for (let i = 0; i \u0026lt; directlights.length; i++) { let light = directlights[i]; let x = light.dir[0]; let y = light.dir[1]; let z = light.dir[2]; let mag = Math.sqrt(x * x + y * y + z * z); let light_dir = [x / mag, y / mag, z / mag]; light_dir = m3_camera.multVec(light_dir); directionalLight(light.col[0] * 255, light.col[1] * 255, light.col[2] * 255, light_dir[0], light_dir[1], light_dir[2]); } } function setPointlight(pointlights) { for (let i = 0; i \u0026lt; pointlights.length; i++) { let light = pointlights[i]; pointLight(light.col[0] * 255, light.col[1] * 255, light.col[2] * 255, light.pos[0], light.pos[1], light.pos[2]); } } p5.Matrix.prototype.multVec = function (vsrc, vdst) { vdst = (vdst instanceof Array) ? vdst : []; let x = 0, y = 0, z = 0, w = 1; if (vsrc instanceof p5.Vector) { x = vsrc.x; y = vsrc.y; z = vsrc.z; } else if (vsrc instanceof Array) { x = vsrc[0]; y = vsrc[1]; z = vsrc[2]; w = vsrc[3]; w = (w === undefined) ? 1 : w; } let mat = this.mat4 || this.mat3; if (mat.length === 16) { vdst[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w; vdst[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w; vdst[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w; vdst[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w; } else { vdst[0] = mat[0] * x + mat[3] * y + mat[6] * z; vdst[1] = mat[1] * x + mat[4] * y + mat[7] * z; vdst[2] = mat[2] * x + mat[5] * y + mat[8] * z; } return vdst; } Execution # [1] (Click on the canvas and press any key) # [2] (Click on the canvas and move the cursor pointer) # [3] (Click on the canvas and zoom in) # Conclusions # Real-time PC graphics have long used a technique called \u0026ldquo;rasterization\u0026rdquo; to display three-dimensional objects on a two-dimensional screen. It is a fast technique and the results have become very good over the last few years. Rasterization is still a topic that continues to be studied and improved to make modern applications faster and lighter. It has many applications at the level of video games and computer graphics.\nReferences # Rasterisation p5.Quadrille p5.EasyCam - Random Boxes Examples "},{"id":12,"href":"/VisualComputing2022-2/docs/excercises/SpatialCoherence/","title":"Spatial Coherence","section":"Excercises","content":" Excercise # Excercise\nResearch spatial coherence visual applications. Problem statement # Light spatial coherence is a fenommenon of electromagnetic waves in which the correlation of amplitude values at different the wavefront are evaluated in order to determine and classify the current state of the wave thats being propagated. Does this affect color visualization?\nBackground # Temporal Coherence is a measure of the correlation of light wave’s phase at different points along the direction of propagation – it tells us how monochromatic a source is. Spatial Coherence is a measure of the correlation of a light wave’s phase at different points transverse to the direction of propagation - it tells us how uniform the phase of a wavefront is. As waves (visible color light waves included) propagate through space, their amplitude magnitude and frequency varies ever so slightly both in a temporal and spatial manner.\nThese two measurements are not mutually exclusive, meaning that all waves can be different ammounts of spatially and temporally incoherent at the same time.\nThe important mathematical value evaluated is that of mutual coherence, that is, the correlation of two or more composing spectrums at a certain time.\nConclusions # Spatial and temporal coherence explains through these correlations how colors and focus are altered both depending on distance and angles in which colors are observed, both because of diffussion of light and phase differences in the composing spectrums.\n"},{"id":13,"href":"/VisualComputing2022-2/docs/excercises/TerrainVisualizationApplication/","title":"Terrain Visualization Application","section":"Excercises","content":" Excercise 2 # Excercise 2\nDevelop a terrain visualization application. Problem statement # Develop an application that allows visualizing terrain with Perlin noise\nBackground # Perling Noise: According to wikipedia, Perlin Noise is a mathematical function that uses interpolation between a large number of precalculated vector gradients that construct a value that varies pseudo-randomly in space or time. It resembles white noise, and is frequently used in computer-generated images to simulate variability in all kinds of phenomena, thus approaching a more natural appearance. [Wikipedia] (https://en.wikipedia.org/wiki/Perlin_noise)\nMach band: Mach Bands is an optical illusion that exaggerates the contrast between edges of nearby grayscale bands. [Wikipedia] (https://en.wikipedia.org/wiki/Mach_bands)\nCode (solution) \u0026amp; results # Terrain Visualization Application # Terrain Visualization Application // Source code https://thecodingtrain.com/CodingChallenges/011-perlinnoiseterrain.html // Modified var cols, rows; var scl = 20; var w = 1400; var h = 1000; var flying = 0; let fSlider let strokeCheckbox var terrain = []; function setup() { createCanvas(600, 600, WEBGL); cols = w / scl; rows = h / scl; for (var x = 0; x \u0026lt; cols; x++) { terrain[x] = []; for (var y = 0; y \u0026lt; rows; y++) { terrain[x][y] = 0; } } fSlider = createSlider(0,0.02, 0.005, 0.005) fSlider.position(10, 10); fSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); strokeCheckbox = createCheckbox(\u0026#39;stroke\u0026#39;, false); strokeCheckbox.position(10, 30); } function draw() { flying -= fSlider.value(); var yoff = flying; for (var y = 0; y \u0026lt; rows; y++) { var xoff = 0; for (var x = 0; x \u0026lt; cols; x++) { terrain[x][y] = map(noise(xoff, yoff), 0, 1, -100, 100); xoff += 0.2; } yoff += 0.2; } if(strokeCheckbox.checked()) { noStroke() } else { stroke(200) } background(0,0,200); translate(0, 50); rotateX(PI / 3); fill(200, 200, 200, 120); translate(-w / 2, -h / 2); for (var y = 0; y \u0026lt; rows - 1; y++) { beginShape(TRIANGLE_STRIP); for (var x = 0; x \u0026lt; cols; x++) { vertex(x * scl, y * scl, terrain[x][y]); vertex(x * scl, (y + 1) * scl, terrain[x][y + 1]); } endShape(); } } Mach Bands // Original code: https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/MachBands.js // Modified var height = 70; function setup() { createCanvas(400, 280); smooth(); } function draw() { background(255); if( height \u0026lt; 35 ) height = 35; if( height \u0026gt; 70 ) height = 70; noStroke(); fill(60,60,60); rect(0,0,400,height); fill(80,80,80); rect(0,70,400,height); fill(120,120,120); rect(0,140,400,height); fill(150,150,150); rect(0,210,400,height); fill(180,180,180); } function mouseClicked() { if(height == 70) { height -= 30; } else { height += 30 } }; Conclusions \u0026amp; future work # Mach band is an interesting optical illusion that activates the edge detection of the eye. Perlin noise is very useful for producing pseudorandomness resembling natural terrain. For future work it is recommended to analyze the mach band in different shades of colors.\n"},{"id":14,"href":"/VisualComputing2022-2/docs/shortcodes/","title":"Shortcodes","section":"Docs","content":" Shortcodes # En ésta sección podrás ver los shortcodes de la plantilla Buttons Buttons # Buttons are styled links that can lead to local page or external link. Example # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute Columns Columns # Columns help organize shorter pieces of content horizontally for readability. {{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Details Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode. Example # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip; Title Markdown content # Lorem markdownum insigne\u0026hellip; Hints Hints # Hint shortcode can be used as hint/alerts/notification block. There are 3 colors to choose: info, warning and danger. {{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content Katex KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX Example # {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here. Mermaid Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text. Override Mermaid Initialization Config To override the initialization config for Mermaid, create a mermaid.json file in your assets folder! Example # {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. P5 p5 # p5 helps add p5 sketches into your book. There are two types of p5 shortcodes according to the html element used to embed them. Types # Div p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div. p5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Tabs Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform. {{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content. Lorem markdownum insigne. Olympo signis Delphis! "},{"id":15,"href":"/VisualComputing2022-2/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":16,"href":"/VisualComputing2022-2/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. Mid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Right Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. "},{"id":17,"href":"/VisualComputing2022-2/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip; Title Markdown content # Lorem markdownum insigne\u0026hellip; "},{"id":18,"href":"/VisualComputing2022-2/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":19,"href":"/VisualComputing2022-2/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here.\n"},{"id":20,"href":"/VisualComputing2022-2/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":21,"href":"/VisualComputing2022-2/docs/shortcodes/p5/","title":"P5","section":"Shortcodes","content":" p5 # p5 helps add p5 sketches into your book. There are two types of p5 shortcodes according to the html element used to embed them.\nTypes # Div p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div. p5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified. Scintillating grid # Look at this and also this among many more references there are. p5-div markdown {{\u0026lt; p5-div sketch=\u0026#34;/showcase/sketches/scintillating. Iframe p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe. p5-iframe # {{\u0026lt; p5-iframe ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified. Color relativity # Look at this brief explanation about what color relativity is. p5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/colors. "},{"id":22,"href":"/VisualComputing2022-2/docs/shortcodes/p5/div/","title":"Div","section":"P5","content":"p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.\np5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nScintillating grid # Look at this and also this among many more references there are.\np5-div markdown {{\u0026lt; p5-div sketch=\u0026#34;/showcase/sketches/scintillating.js\u0026#34; \u0026gt;}} p5-instance-div # {{\u0026lt; p5-instance-div id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.2\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-instance-div \u0026gt;}} Note that the inline sketch should be coded in p5 instance mode syntax. All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nLilac chaser # Look at this introductory reference.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;lilac-chaser\u0026#34; \u0026gt;}} // Adapted from [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/lilacChaser.js) let jump = 0; let count = 0; p5.setup = function() { p5.createCanvas(400, 400); p5.frameRate(7); }; function drawBlurCircles(x, y, r) { p5.push(); p5.noStroke(); var opc = 0.4; var step = 3.0/r; for (var i = r; i \u0026gt; 0; i-=1.5) { if (opc \u0026lt; 5) { opc += step; p5.fill(255, 20, 180, opc); } p5.ellipse(x, y, i, i); } p5.pop(); }; p5.draw = function() { p5.background(200); var numCircles = 12; var stepAngle = 360.0/numCircles; p5.push(); p5.translate(p5.width/2.0, p5.height/2.0); for (var i = 0; i \u0026lt; 360; i = i + stepAngle) { if (i != jump) { p5.push(); p5.rotate(p5.radians(i)); drawBlurCircles(120, 0, 60); p5.pop(); } } if( !p5.mouseIsPressed ) { jump = (jump + stepAngle)%360; } p5.push(); p5.strokeWeight(1.5); p5.line(-7, 0, 7, 0); p5.line(0, -7, 0, 7); p5.pop(); p5.pop(); } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable. Video on canvas # Adapted from here. Don\u0026rsquo;t forget to checkout also the video on dom example.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;video\u0026#34; \u0026gt;}} let fingers; p5.setup = function() { p5.createCanvas(710, 400); // specify multiple formats for different browsers fingers = p5.createVideo([\u0026#39;/showcase/sketches/fingers.mov\u0026#39;, \u0026#39;/showcase/sketches/fingers.webm\u0026#39;]); fingers.hide(); // by default video shows up in separate dom // element. hide it and draw it to the canvas instead }; p5.draw = function() { p5.background(150); p5.image(fingers, 10, 10); // draw the video frame to canvas p5.filter(p5.GRAY); p5.image(fingers, 150, 150); // draw a second copy to canvas }; p5.mousePressed = function() { fingers.loop(); // set the video to loop and start playing } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable. "},{"id":23,"href":"/VisualComputing2022-2/docs/shortcodes/p5/iframe/","title":"Iframe","section":"P5","content":"p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.\np5-iframe # {{\u0026lt; p5-iframe ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nColor relativity # Look at this brief explanation about what color relativity is.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/colors.js\u0026#34; width=\u0026#34;725\u0026#34; height=\u0026#34;425 \u0026gt;}} Third party libraries # Example adapted from p5.EasyCam.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/quick_easycam.js\u0026#34; lib1=\u0026#34;https://cdn.jsdelivr.net/gh/freshfork/p5.EasyCam@1.2.1/p5.easycam.min.js\u0026#34; width=\u0026#34;525\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}} Sound # Example took from the p5 examples.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/sound.js\u0026#34; width=\u0026#34;225\u0026#34; height=\u0026#34;225\u0026#34; \u0026gt;}} p5-global-iframe # {{\u0026lt; p5-global-iframe id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.2\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-global-iframe \u0026gt;}} Note that the inline sketch should be coded in p5 global mode syntax. All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nBreathing square # Look at this reference for an explanation and further parameterization of the illusion.\np5-global-iframe markdown {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;625\u0026#34; height=\u0026#34;625\u0026#34; \u0026gt;}} // Coded as `global mode` of [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/rotateSquare.js) let angle = 0; let speed = 0.06; function setup() { createCanvas(600, 600); } function draw() { background(255, 255, 255); rotateSquare(); if (!mouseIsPressed) { strokeWeight(0); stroke(0); fill(255, 140, 0); rect(0, 0, 281, 281); rect(318, 0, 281, 281); rect(0, 318, 281, 281); rect(318, 318, 281, 281); } } function rotateSquare() { push(); angle += speed; strokeWeight(0); stroke(0); fill(0, 0, 255); translate(width / 2, height / 2); rotate(angle); rect(-187.5, -187.5, 375, 375); pop(); } {{\u0026lt; /p5-global-iframe \u0026gt;}} p5-widget # The p5-widget shortcode embed p5.js code within an p5-widget.\n{{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.2\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-widget \u0026gt;}} All parameters are optional. Default ver is 1.4.2. For example:\nWidget example # p5-widget markdown {{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.2\u0026#34; \u0026gt;}} function setup() { createCanvas(300, 300); } function draw() { background(255, 0, 255); } {{\u0026lt; /p5-widget \u0026gt;}} "},{"id":24,"href":"/VisualComputing2022-2/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":25,"href":"/VisualComputing2022-2/docs/team/","title":"Team","section":"Docs","content":" Team # Nuestro equipo está compuesto por:\nAndres Ricardo Perez Rojas riperezro@unal.edu.co Gabriel Perez Santamaria gaperezsa@unal.edu.co, Jhonatan Torres Forero jtorresf@unal.edu.co, Andres David Diaz Obando andiazo@unal.edu.co, Maria Valentina Molina Florez mmolinaf@unal.edu.co Andres Ricardo Perez Rojas Andres Ricardo Perez Rojas # This is tab Andres Ricardo Perez Rojas content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":26,"href":"/VisualComputing2022-2/docs/workshops/3D_Application/","title":"3 D Application","section":"Workshops","content":" Workshop: 3D WebGL app # Workshop\nImplement a 3d webgl application. The p5.treegl or any other libraries may be used. Problem statement # Design and implement a 3D Application using WebGL, through some library or framwork based on it.\nBackground # WebGL # WebGL is an API for creating 3D graphics on web browsers without the need for any additional plug-ins, and is itself based on the OpenGL API. It uses the Canvas element from HTML to visualize the resulting graphics, and therefore is integrated with the DOM model. The API is managed by the Kronos Group.\nThree.js # Three.js is an open-source JavaScript library used to create GPU-accelerated 3D animations inside of websites. It is based on the WebGL API, and therefore does not require additional plug-ins. It provides a higher level API for creating complex 3D graphics and animations.\nCode (solution) \u0026amp; results # Car perspective game # Our code is based on Hunor Marton\u0026rsquo;s tutorial for a basic 3D game with textures. We removed the additional computer-controlled cars. Afterwards, we added support for multidirectional controls that used the current position and rotation to updated the cars properties, so that the inputs are now given with respect of the cars point of view regardless of the of the camera perspective. In addition to the existing orthografic camera, we added support for a perspective camera that sits right behind and a little over the car, and set up a key press to change the camera perspective from the original OrthographicCamera to the new PerspectiveCamera and viceversa.\nJavaScript code window.focus(); // Capture keys right away (by default focus is on editor) // Pick a random value from an array function pickRandom(array) { return array[Math.floor(Math.random() * array.length)]; } const vehicleColors = [ 0xa52523, 0xef2d56, 0x0ad3ff, 0xff9f1c /*0xa52523, 0xbdb638, 0x78b14b*/ ]; const lavaRed = \u0026#34;#7cfc00\u0026#34;; const trackColor = \u0026#34;black\u0026#34;; const blockColor = \u0026#34;#BF9742\u0026#34;; const mountainColor = \u0026#34;#A47E3B\u0026#34;; const baseColor = \u0026#34;#61481C\u0026#34;; const wheelGeometry = new THREE.BoxBufferGeometry(12, 33, 12); const wheelMaterial = new THREE.MeshLambertMaterial({ color: 0x333333 }); const config = { shadows: true, // Use shadow trees: true, // Add trees to the map curbs: true, // Show texture on the extruded geometry grid: false // Show grid helper }; const playerAngleInitial = Math.PI; let playerAngleMoved; let accelerate = false; // Is the player accelerating let decelerate = false; // Is the player decelerating let turnLeft = false; // Is player turning left let turnRight = false; // Is player turning right let inOrthographicView = true; let ready; let lastTimestamp; const trackRadius = 225; const trackWidth = 45; const innerTrackRadius = trackRadius - trackWidth; const outerTrackRadius = trackRadius + trackWidth; const arcAngle1 = (1 / 3) * Math.PI; // 60 degrees const deltaY = Math.sin(arcAngle1) * innerTrackRadius; const arcAngle2 = Math.asin(deltaY / outerTrackRadius); const arcCenterX = (Math.cos(arcAngle1) * innerTrackRadius + Math.cos(arcAngle2) * outerTrackRadius) / 2; const arcAngle3 = Math.acos(arcCenterX / innerTrackRadius); const arcAngle4 = Math.acos(arcCenterX / outerTrackRadius); // Set up physics const world = new CANNON.World(); world.gravity.set(0, 0, -9.82); var lavaMesh, lavaBody; var trackMesh, trackBody; var blockMesh, blockBody; var mountainMesh, mountainBody; var baseMesh, baseBody; const groundPhysMat = new CANNON.Material(); const carPhysMat = new CANNON.Material(); const groundBoxContactMat = new CANNON.ContactMaterial( groundPhysMat, carPhysMat, { friction: 0.04, restitution: 0 } ); // Initialize ThreeJs // Set up camera const aspectRatio = window.innerWidth / window.innerHeight; const cameraWidth = 960; const cameraHeight = cameraWidth / aspectRatio; let camera = new THREE.OrthographicCamera( cameraWidth / -2, // left cameraWidth / 2, // right cameraHeight / 2, // top cameraHeight / -2, // bottom 5, // near plane 2000 // far plane ); camera.position.set(200, -500, 630); camera.up = new THREE.Vector3(0, 0, 1); camera.lookAt(0, 0, 0); const scene = new THREE.Scene(); const playerCar = Car(); const carBody = new CANNON.Body({ mass: 20, shape: new CANNON.Box(new CANNON.Vec3(60, 30, 15)), material: carPhysMat }); world.addBody(carBody); scene.add(playerCar); renderMap(); world.addContactMaterial(groundBoxContactMat); // Set up lights const ambientLight = new THREE.AmbientLight(0xffffff, 0.6); scene.add(ambientLight); const dirLight = new THREE.DirectionalLight(0xffffff, 0.6); dirLight.position.set(100, -300, 300); dirLight.castShadow = true; dirLight.shadow.mapSize.width = 1024; dirLight.shadow.mapSize.height = 1024; dirLight.shadow.camera.left = -800; dirLight.shadow.camera.right = 700; dirLight.shadow.camera.top = 800; dirLight.shadow.camera.bottom = -300; dirLight.shadow.camera.near = 100; dirLight.shadow.camera.far = 800; scene.add(dirLight); // const cameraHelper = new THREE.CameraHelper(dirLight.shadow.camera); // scene.add(cameraHelper); if (config.grid) { const gridHelper = new THREE.GridHelper(80, 8); gridHelper.rotation.x = Math.PI / 2; scene.add(gridHelper); } // Set up renderer const renderer = new THREE.WebGLRenderer({ antialias: true, powerPreference: \u0026#34;high-performance\u0026#34;, alpha: true }); renderer.setSize(window.innerWidth, window.innerHeight); if (config.shadows) renderer.shadowMap.enabled = true; document.body.appendChild(renderer.domElement); reset(); function reset() { // Reset position playerAngleMoved = 0; playerCar.position.x = -300; playerCar.position.y = -300; playerCar.position.z = 50; playerCar.rotation.x = 0; playerCar.rotation.y = 0; playerCar.rotation.z = 0; lastTimestamp = undefined; // Reset physics carBody.position.copy(playerCar.position); carBody.quaternion.copy(playerCar.quaternion); // Place the player\u0026#39;s car to the starting position movePlayerCar(0); // Render the scene renderer.render(scene, camera); ready = true; } function startGame() { if (ready) { ready = false; renderer.setAnimationLoop(animation); } } function renderMap() { const lavaDimensions = { x: 2000, y: 2000, pos_z: -200 } const trackDimensions = { x: 800, y: 700, pos_z: 10 } const blockDimensions = { x: 100, y: 50, pos_z: 0 } const mountainDimensions = { x: 150, y: 100, pos_z: 0 } const baseDimensions = { x: 400, y: 400, pos_z: -200 } // Lava lavaBody = new CANNON.Body({ shape: new CANNON.Box(new CANNON.Vec3(lavaDimensions.x/2, lavaDimensions.y/2, 0.1)), type: CANNON.Body.STATIC, material: groundPhysMat, position: new CANNON.Vec3(0, 0, lavaDimensions.pos_z), }); world.addBody(lavaBody); const lavaGeo = new THREE.PlaneGeometry(lavaDimensions.x, lavaDimensions.y); const lavaMat = new THREE.MeshBasicMaterial({ color: lavaRed, side: THREE.DoubleSide, wireframe: false }); lavaMesh = new THREE.Mesh(lavaGeo, lavaMat); scene.add(lavaMesh); // Track trackBody = new CANNON.Body({ shape: new CANNON.Box(new CANNON.Vec3(trackDimensions.x/2, trackDimensions.y/2, 0.1)), type: CANNON.Body.STATIC, material: groundPhysMat, position: new CANNON.Vec3(0, 0, trackDimensions.pos_z), }); world.addBody(trackBody); const trackGeo = new THREE.PlaneGeometry(trackDimensions.x, trackDimensions.y); const trackMat = new THREE.MeshBasicMaterial({ color: trackColor, side: THREE.DoubleSide, wireframe: false }); trackMesh = new THREE.Mesh(trackGeo, trackMat); scene.add(trackMesh); // Block blockBody = new CANNON.Body({ shape: new CANNON.Box(new CANNON.Vec3(blockDimensions.x/2, blockDimensions.y/2, 1000)), type: CANNON.Body.STATIC, material: groundPhysMat, position: new CANNON.Vec3(0, 0, blockDimensions.pos_z), }); world.addBody(blockBody); const blockGeo = new THREE.BoxGeometry(blockDimensions.x, blockDimensions.y, 1000); const blockMat = new THREE.MeshBasicMaterial({ color: blockColor, side: THREE.DoubleSide, wireframe: false }); blockMesh = new THREE.Mesh(blockGeo, blockMat); scene.add(blockMesh); // Mountain mountainBody = new CANNON.Body({ shape: new CANNON.Box(new CANNON.Vec3(mountainDimensions.x/2, mountainDimensions.y/2, 700)), type: CANNON.Body.STATIC, material: groundPhysMat, position: new CANNON.Vec3(0, 0, mountainDimensions.pos_z), }); world.addBody(mountainBody); const mountainGeo = new THREE.BoxGeometry(mountainDimensions.x, mountainDimensions.y, 700); const mountainMat = new THREE.MeshBasicMaterial({ color: mountainColor, side: THREE.DoubleSide, wireframe: false }); mountainMesh = new THREE.Mesh(mountainGeo, mountainMat); scene.add(mountainMesh); // Base baseBody = new CANNON.Body({ shape: new CANNON.Box(new CANNON.Vec3(baseDimensions.x/2, baseDimensions.y/2, 500)), type: CANNON.Body.STATIC, material: groundPhysMat, position: new CANNON.Vec3(0, 0, baseDimensions.pos_z), }); world.addBody(baseBody); const baseGeo = new THREE.BoxGeometry(baseDimensions.x, baseDimensions.y, 500); const baseMat = new THREE.MeshBasicMaterial({ color: baseColor, side: THREE.DoubleSide, wireframe: false }); baseMesh = new THREE.Mesh(baseGeo, baseMat); scene.add(baseMesh); } function getCarFrontTexture() { const canvas = document.createElement(\u0026#34;canvas\u0026#34;); canvas.width = 64; canvas.height = 32; const context = canvas.getContext(\u0026#34;2d\u0026#34;); context.fillStyle = \u0026#34;#ffffff\u0026#34;; context.fillRect(0, 0, 64, 32); context.fillStyle = \u0026#34;#666666\u0026#34;; context.fillRect(8, 8, 48, 24); return new THREE.CanvasTexture(canvas); } function getCarSideTexture() { const canvas = document.createElement(\u0026#34;canvas\u0026#34;); canvas.width = 128; canvas.height = 32; const context = canvas.getContext(\u0026#34;2d\u0026#34;); context.fillStyle = \u0026#34;#ffffff\u0026#34;; context.fillRect(0, 0, 128, 32); context.fillStyle = \u0026#34;#666666\u0026#34;; context.fillRect(10, 8, 38, 24); context.fillRect(58, 8, 60, 24); return new THREE.CanvasTexture(canvas); } function Car() { const car = new THREE.Group(); const color = pickRandom(vehicleColors); const main = new THREE.Mesh( new THREE.BoxBufferGeometry(60, 30, 15), new THREE.MeshLambertMaterial({ color }) ); main.position.z = 12; main.castShadow = true; main.receiveShadow = true; car.add(main); const carFrontTexture = getCarFrontTexture(); carFrontTexture.center = new THREE.Vector2(0.5, 0.5); carFrontTexture.rotation = Math.PI / 2; const carBackTexture = getCarFrontTexture(); carBackTexture.center = new THREE.Vector2(0.5, 0.5); carBackTexture.rotation = -Math.PI / 2; const carLeftSideTexture = getCarSideTexture(); carLeftSideTexture.flipY = false; const carRightSideTexture = getCarSideTexture(); const cabin = new THREE.Mesh(new THREE.BoxBufferGeometry(33, 24, 12), [ new THREE.MeshLambertMaterial({ map: carFrontTexture }), new THREE.MeshLambertMaterial({ map: carBackTexture }), new THREE.MeshLambertMaterial({ map: carLeftSideTexture }), new THREE.MeshLambertMaterial({ map: carRightSideTexture }), new THREE.MeshLambertMaterial({ color: 0xffffff }), // top new THREE.MeshLambertMaterial({ color: 0xffffff }) // bottom ]); cabin.position.x = -6; cabin.position.z = 25.5; cabin.castShadow = true; cabin.receiveShadow = true; car.add(cabin); const backWheel = new Wheel(); backWheel.position.x = -18; car.add(backWheel); const frontWheel = new Wheel(); frontWheel.position.x = 18; car.add(frontWheel); return car; } function Wheel() { const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial); wheel.position.z = 6; wheel.castShadow = false; wheel.receiveShadow = false; return wheel; } window.addEventListener(\u0026#34;keydown\u0026#34;, function (event) { if (event.key == \u0026#34;ArrowUp\u0026#34;) { startGame(); accelerate = true; return; } if (event.key == \u0026#34;ArrowDown\u0026#34;) { decelerate = true; return; } if (event.key == \u0026#34;ArrowLeft\u0026#34;) { turnLeft = true; return; } if (event.key == \u0026#34;ArrowRight\u0026#34;) { turnRight = true; return; } if (event.key == \u0026#34;R\u0026#34; || event.key == \u0026#34;r\u0026#34;) { reset(); return; } if (event.key == \u0026#34;C\u0026#34; || event.key == \u0026#34;c\u0026#34;) { if (inOrthographicView) inOrthographicView = false; else { inOrthographicView = true; setUpOrthographicCamera(); } return; } }); window.addEventListener(\u0026#34;keyup\u0026#34;, function (event) { if (event.key == \u0026#34;ArrowUp\u0026#34;) { accelerate = false; return; } if (event.key == \u0026#34;ArrowDown\u0026#34;) { decelerate = false; return; } if (event.key == \u0026#34;ArrowLeft\u0026#34;) { turnLeft = false; return; } if (event.key == \u0026#34;ArrowRight\u0026#34;) { turnRight = false; return; } }); function animation(timestamp) { if (!lastTimestamp) { lastTimestamp = timestamp; return; } const timeDelta = timestamp - lastTimestamp; movePlayerCar(timeDelta); // Apply gravity const timeStep = 1 / 60; world.step(timeStep); // Update THREE car position playerCar.position.copy(carBody.position); playerCar.quaternion.copy(carBody.quaternion); lavaMesh.position.copy(lavaBody.position); lavaMesh.quaternion.copy(lavaBody.quaternion); trackMesh.position.copy(trackBody.position); trackMesh.quaternion.copy(trackBody.quaternion); blockMesh.position.copy(blockBody.position); blockMesh.quaternion.copy(blockBody.quaternion); renderer.render(scene, camera); lastTimestamp = timestamp; } function movePlayerCar(timeDelta) { const playerSpeed = getPlayerSpeed(); playerAngleMoved += playerSpeed.sideways * timeDelta; const totalPlayerAngle = playerAngleInitial + playerAngleMoved; playerCar.rotation.z = totalPlayerAngle - Math.PI / 2; carBody.quaternion.copy(playerCar.quaternion); const forwardMovement = playerSpeed.forward * timeDelta; const deltaX = forwardMovement * Math.cos(playerCar.rotation.z); const deltaY = forwardMovement * Math.sin(playerCar.rotation.z); // playerCar.position.x += deltaX; // playerCar.position.y += deltaY; const impulse = new CANNON.Vec3(playerSpeed.forward, 0, -1); carBody.applyLocalImpulse(impulse,new CANNON.Vec3(0, 0, 0)); if (inOrthographicView == false) setUpPerspectiveCamera(); } function getPlayerSpeed() { const baseSpeedForward = 20; const baseSpeedSideways = 0.004; let speedObject = { forward: 0, sideways: 0 } if (accelerate == decelerate) speedObject.forward = 0; else if (accelerate) speedObject.forward = baseSpeedForward; else if (decelerate) speedObject.forward = -baseSpeedForward; if (turnLeft == turnRight || speedObject.forward == 0) speedObject.sideways = 0; else if (turnLeft) speedObject.sideways = baseSpeedSideways; else if (turnRight) speedObject.sideways = -baseSpeedSideways; return speedObject; } function setUpOrthographicCamera() { camera = new THREE.OrthographicCamera( cameraWidth / -2, // left cameraWidth / 2, // right cameraHeight / 2, // top cameraHeight / -2, // bottom 5, // near plane 2000 // far plane ); camera.position.set(200, -500, 630); camera.up = new THREE.Vector3(0, 0, 1); camera.lookAt(0, 0, 0); renderer.render(scene, camera); } function setUpPerspectiveCamera() { camera = new THREE.PerspectiveCamera(45, aspectRatio, 1, 1000); const deltaCameraX = 200 * Math.cos(playerCar.rotation.z); const deltaCameraY = 200 * Math.sin(playerCar.rotation.z); camera.position.set(playerCar.position.x - deltaCameraX, playerCar.position.y - deltaCameraY, playerCar.position.z + 150); camera.up = new THREE.Vector3(0, 0, 1); camera.lookAt(playerCar.position.x + deltaCameraX, playerCar.position.y + deltaCameraY, playerCar.position.z + 20); camera.updateProjectionMatrix(); renderer.render(scene, camera); } window.addEventListener(\u0026#34;resize\u0026#34;, () =\u0026gt; { console.log(\u0026#34;resize\u0026#34;, window.innerWidth, window.innerHeight); // Adjust camera if (inOrthographicView) setUpOrthographicCamera(); else setUpPerspectiveCamera(); // Reset renderer renderer.setSize(window.innerWidth, window.innerHeight); renderer.render(scene, camera); }); Use the arrow keys to move the car. Press the R key to reset the car\u0026rsquo;s position and orientation. Press the C key tho switch betwee the orthographic and perspective camera. Conclusions \u0026amp; future work # Manipulating the camera perspective is curcial for creating immersive and interactive visual experiences. Frameworks like Three.js provide strong tools for manipulating the perspective matrix in an easy and practical way. Even through these indirect methods for manipulating the matrix, the use of the basic operations of rotation and translation of points in 3D space are evident, and understading how they work and how to correctly apply them is necessary for using these kind of tools.\nThe abstraction of a camera object, with properties that define the eye matrix, is a very useful artifact for manipualting the perspective. In this application, we defined the eye matrix by setting the position of the PerspectiveCamera object, setiing a vector as the \u0026ldquo;up\u0026rdquo; direction ofr the camera (in this case the identity vector pointing in the positive z-axis direction), and a point for the camera to look towards. These properies uniquely define an eye matrix, that is built internally by the framework to calculate the position, orientation, and size of the objects in the viewing frustum.\nFurthermore, a possible future area of work could be the implementation of a seamless, clean transtition between the orthographic and perspectove camerain Three.js. With a feature like this, a continous camera movement could be achived even if both types of camera available are used. Possibly, a more low-level manipulation of the eye matrix would be necessary to achieve this effect.\nSources # [1] Márton Borbély, Hunor. Three.js Tutorial - How to Build a Simple Car with Texture in 3D. freeCodeCamp. 2021. Available: https://www.freecodecamp.org/news/three-js-tutorial/\n[2] WebGL\n[3] Three.js\n"},{"id":27,"href":"/VisualComputing2022-2/docs/workshops/","title":"Workshops","section":"Docs","content":" Workshops # En ésta sección podrás ver las entregas de los talleres del curso\nWorkshops # 3 D Application Workshop: 3D WebGL app # Workshop Implement a 3d webgl application. The p5.treegl or any other libraries may be used. Problem statement # Design and implement a 3D Application using WebGL, through some library or framwork based on it. Background # WebGL # WebGL is an API for creating 3D graphics on web browsers without the need for any additional plug-ins, and is itself based on the OpenGL API. It uses the Canvas element from HTML to visualize the resulting graphics, and therefore is integrated with the DOM model. Masking Workshop Workshop: Masking # Workshop 2 Implement an image processing web app supporting different image kernels. Problem statement # Implement an image processing web app supporting different image kernels and supporting: Image histogram visualization. Different lightness (coloring brightness) tools. Background # Image Kernel # In image processing, a kernel, convolution matrix, or mask is a small matrix used for blurring, sharpening, embossing, edge detection, and more. This is accomplished by doing a convolution between the kernel and an image. Visual Illussions Workshop Workshop: Visual Illusions # Workshop 1 Study, implement and discuss possible applications of some known visual phenomena and optical illusions. Problem statement # Identify, implement, and discuss possible applications of some known optical illussions on the design and development of computer graphics. Background # Stroboscopic Artifacts # The color wheel displayed contains the three colors: red, green, and blue. When the angular speed of the rotation is turned up to 120° per frame, a strange effect can be seen. "},{"id":28,"href":"/VisualComputing2022-2/docs/workshops/maskingWorkshop/","title":"Masking Workshop","section":"Workshops","content":" Workshop: Masking # Workshop 2\nImplement an image processing web app supporting different image kernels. Problem statement # Implement an image processing web app supporting different image kernels and supporting:\nImage histogram visualization. Different lightness (coloring brightness) tools. Background # Image Kernel # In image processing, a kernel, convolution matrix, or mask is a small matrix used for blurring, sharpening, embossing, edge detection, and more. This is accomplished by doing a convolution between the kernel and an image.\nImage histogram # An image histogram is a type of histogram that acts as a graphical representation of the tonal distribution in a digital image. It plots the number of pixels for each tonal value. By looking at the histogram for a specific image a viewer will be able to judge the entire tonal distribution at a glance.\nLightness # The simplest definition is just the arithmetic mean, i.e. average, of the three components, in the HSI model called intensity. This is simply the projection of a point onto the neutral axis—the vertical height of a point in our tilted cube. The advantage is that, together with Euclidean-distance calculations of hue and chroma, this representation preserves distances and angles from the geometry of the RGB cube.\nCode (solution) \u0026amp; results # Utility functions # Generate histogram const IMAGE_MAX_HEIGHT = 400; const IMAGE_MAX_WIDTH = 400; function getImageHeight(img){ if(img.width \u0026lt;= img.height) return IMAGE_MAX_HEIGHT; return img.height * (1 - (img.width - IMAGE_MAX_WIDTH) / img.width); } function getImageWidth(img){ if(img.height \u0026lt;= img.width) return IMAGE_MAX_WIDTH; return img.width * (1 - (img.height - IMAGE_MAX_HEIGHT) / img.height); } function generateHistogram(imageBuffer, isRGB, yPosition, start, end){ let histBrightness = (new Array(256)).fill(0); let histR = (new Array(256)).fill(0); let histG = (new Array(256)).fill(0); let histB = (new Array(256)).fill(0); for (let i = start; i \u0026lt; end; i+=4) { let r = imageBuffer[i]; let g = imageBuffer[i + 1]; let b = imageBuffer[i + 2]; histBrightness[r]++; histBrightness[g]++; histBrightness[b]++; histR[r]++; histG[g]++; histB[b]++; } let maxBrightness = 0; if (isRGB) { for (let i = 0; i \u0026lt; 256; i++) { if (maxBrightness \u0026lt; histR[i]) { maxBrightness = histR[i] } else if (maxBrightness \u0026lt; histG[i]) { maxBrightness = histG[i] } else if (maxBrightness \u0026lt; histB[i]) { maxBrightness = histB[i] } } } else { for (let i = 1; i \u0026lt; 256; i++) { if (maxBrightness \u0026lt; histBrightness[i]) { maxBrightness = histBrightness[i] } } } const guideHeight = 8; const startY = yPosition + 400; const dx = width / 256; const dy = 400 / maxBrightness; rect(0, yPosition, 400, 400); strokeWeight(dx); for (let i = 0; i \u0026lt; 256; i++) { let x = i * dx; if (!isRGB) { // Value stroke(\u0026#34;#000000\u0026#34;); line(x, startY, x, startY - histBrightness[i] * dy); } else { // Red stroke(\u0026#34;rgba(220,0,0,0.5)\u0026#34;); line(x, startY, x, startY - histR[i] * dy); // Green stroke(\u0026#34;rgba(0,210,0,0.5)\u0026#34;); line(x, startY, x, startY - histG[i] * dy); // Blue stroke(\u0026#34;rgba(0,0,255,0.5)\u0026#34;); line(x, startY, x, startY - histB[i] * dy); } // Guide stroke(\u0026#39;rgb(\u0026#39; + i + \u0026#39;, \u0026#39; + i + \u0026#39;, \u0026#39; + i + \u0026#39;)\u0026#39;); line(x, startY, x, startY + guideHeight); } } Convolve function applyLuma(yPosition){ const w = 200; const xstart = 0; const ystart = 0; const xend = 400; const yend = 400; loadPixels(); // Begin our loop for every pixel in the smaller image for (let x = xstart; x \u0026lt; xend; x++) { for (let y = ystart; y \u0026lt; yend; y++ ) { let pos = (x + y * 400) * 4 // retrieve the RGBA values from c and update pixels() let loc = (x + (y + yPosition) * 400) * 4; pixels[loc] = 0; pixels[loc + 1] = 0; pixels[loc + 2] = 0; pixels[loc + 3] = (originalImage.pixels[pos] + originalImage.pixels[pos + 1] + originalImage.pixels[pos + 2]) / 3 } } updatePixels(); } function convolve(matrix, yPosition){ const w = 200; const xstart = 0; const ystart = 0; const xend = 400; const yend = 400; loadPixels(); // Begin our loop for every pixel in the smaller image for (let x = xstart; x \u0026lt; xend; x++) { for (let y = ystart; y \u0026lt; yend; y++ ) { let c = convolution(x, y, matrix, originalImage); // retrieve the RGBA values from c and update pixels() let loc = (x + (y + yPosition) * 400) * 4; pixels[loc] = red(c); pixels[loc + 1] = green(c); pixels[loc + 2] = blue(c); pixels[loc + 3] = alpha(c); } } updatePixels(); } function convolution(x, y, matrix, img) { let rtotal = 0.0; let gtotal = 0.0; let btotal = 0.0; const offset = Math.floor(matrix.length / 2); for (let i = 0; i \u0026lt; matrix.length; i++){ for (let j = 0; j \u0026lt; matrix.length; j++){ // What pixel are we testing const xloc = (x + i - offset); const yloc = (y + j - offset); let loc = (xloc + img.width * yloc) * 4; // Make sure we haven\u0026#39;t walked off our image, we could do better here loc = constrain(loc, 0 , img.pixels.length - 1); // Calculate the convolution // retrieve RGB values rtotal += (img.pixels[loc]) * matrix[i][j]; gtotal += (img.pixels[loc + 1]) * matrix[i][j]; btotal += (img.pixels[loc + 2]) * matrix[i][j]; } } // Make sure RGB is within range rtotal = constrain(rtotal, 0, 255); gtotal = constrain(gtotal, 0, 255); btotal = constrain(btotal, 0, 255); // Return the resulting color return color(rtotal, gtotal, btotal); } P5.js # P5.js let originalImage; let histogramTypeSelect; let kernelTypeSelect; let convolutionCount = 0; function preload() { originalImage = loadImage(\u0026#39;https://cms-assets.tutsplus.com/uploads/users/1191/profiles/19701/profileImage/ngc2237_400.jpg\u0026#39;); } let kernels = { \u0026#34;Sharpen\u0026#34; : [[0,-1,0], [-1,5,-1], [0,-1,0]], \u0026#34;Box blur\u0026#34; : [[1/9,1/9,1/9], [1/9,1/9,1/9], [1/9,1/9,1/9]], \u0026#34;Gaussian blur 3 × 3\u0026#34; : [[1/16,1/8,1/16], [1/8,1/4,1/8], [1/16,1/8,1/16]], \u0026#34;Gaussian blur 5 × 5\u0026#34; : [[1/256,4/256,6/256,4/256,1/256], [4/256,16/256,1/256,16/256,4/256], [6/256,24/256,36/256,24/256,6/256], [4/256,16/256,1/256,16/256,4/256], [1/256,4/256,6/256,4/256,1/256]], \u0026#34;Unsharp masking 5 × 5\u0026#34; : [[-1/256,-4/256,-6/256,-4/256,-1/256], [-4/256,-16/256,-1/256,-16/256,-4/256], [-6/256,-24/256,476/256,-24/256,-6/256], [-4/256,-16/256,-1/256,-16/256,-4/256], [-1/256,-4/256,-6/256,-4/256,-1/256]], }; function setup() { createCanvas(400, 1800); histogramTypeSelect = createSelect(); histogramTypeSelect.position(0, 30) histogramTypeSelect.option(\u0026#39;Brightness histogram\u0026#39;); histogramTypeSelect.option(\u0026#39;RGB histogram\u0026#39;); kernelTypeSelect = createSelect(); kernelTypeSelect.position(0, 60) kernelTypeSelect.option(\u0026#39;Sharpen\u0026#39;); kernelTypeSelect.option(\u0026#39;Box blur\u0026#39;); kernelTypeSelect.option(\u0026#39;Gaussian blur 3 × 3\u0026#39;); kernelTypeSelect.option(\u0026#39;Gaussian blur 5 × 5\u0026#39;); kernelTypeSelect.option(\u0026#39;Unsharp masking 5 × 5\u0026#39;); originalImage.loadPixels(); pixelDensity(1); } function draw() { background(255); if (originalImage) { stroke(\u0026#34;#000000\u0026#34;); rect(0, 100, getImageWidth(originalImage), getImageHeight(originalImage)); const imageHeight = getImageHeight(originalImage); image(originalImage, 0, 100, getImageWidth(originalImage), imageHeight); const isRGBHistogram = histogramTypeSelect.value() === \u0026#39;RGB histogram\u0026#39;; generateHistogram(originalImage.pixels, isRGBHistogram, imageHeight + 100, 0, originalImage.pixels.length / 4) convolve(kernels[kernelTypeSelect.value()] ,imageHeight + 508) stroke(\u0026#34;#000000\u0026#34;); generateHistogram(pixels, isRGBHistogram, imageHeight + 908, (imageHeight + 508) * 400, (imageHeight + 909) * 400) applyLuma(imageHeight + 1316) } } Execution # Future work # In the future we could experiment with more types of kernels and analyze the difference between histograms. We coudld implement more Lightness coversions and test with it. Additionally we could improve the user experiece and add the option to change the image. Conclusions # The image histogram allows a general understanding of how the tonal distribution of an image varies when a kernel is applied to it. Image kernels are an interesting way to apply effects to an image, highlighting the properties that interest us through arrays. Sources # Convolution implementation on p5js Image histogram implementation o js Image histogram HSL and HSV Kernel (image processing) "},{"id":29,"href":"/VisualComputing2022-2/docs/workshops/visualIllussionsWorkshop/","title":"Visual Illussions Workshop","section":"Workshops","content":" Workshop: Visual Illusions # Workshop 1\nStudy, implement and discuss possible applications of some known visual phenomena and optical illusions. Problem statement # Identify, implement, and discuss possible applications of some known optical illussions on the design and development of computer graphics.\nBackground # Stroboscopic Artifacts # The color wheel displayed contains the three colors: red, green, and blue. When the angular speed of the rotation is turned up to 120° per frame, a strange effect can be seen. The colors seems to mix and it results in a gray-ish color. This occurs since movement on a screen is never purely smooth, it only appears to be so when small changes occur frame after frame. At this rotation speed, the three circular sections just change their color, so our perception is that the colors are mixing; hence why we see a tone of gray.\nThe visualization of this effect is dependent also on the framerate of the display, so results may vary. It is also worth noting that if the speed is set to almost 120° but not quite all the way there, the perception will be that the wheel is turning counter-clockwise instead of the original clockwise turn.\nStepping feet # The yellow and blue bars are reffered as \u0026ldquo;feet\u0026rdquo; since they appear to move one after the other as if they\u0026rsquo;re walking. When the background is removed, the true nature of their movement is apparent: they move steadily and together. This illusion was originally demonstrated by Stuart Anstis in 2003. The actual cause of this illusion is still being debated.\nEbbinghaus Illusion # The discovery of this illusion dates back to the end of the 19th century. Its mechanics are still not well understood. It is a quite direct way to show how the context of an object in the scene can heavily influence our perception of size. In the animation, the orange circle surrounded by the smaller rotating ones seems to clearly be larger that the left one, when in reality they are the same size. This can be confirmed by using the slider to make the rotating circles in both sides transparent.\nCode (solution) \u0026amp; results # Stroboscopic Artifacts # var start, speed; var color_1, color_2, color_3; function setup() { createCanvas(400, 400); start = 0; // Slider that controls the truning speed. slider = createSlider(0, 120, 20); slider.position(10, 10); slider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); // Color pickers for the three sections. color_1 = createColorPicker(\u0026#39;red\u0026#39;); color_1.position(width + 5, 5); color_2 = createColorPicker(\u0026#39;green\u0026#39;); color_2.position(width + 5, 35); color_3 = createColorPicker(\u0026#39;blue\u0026#39;); color_3.position(width + 5, 65); } function draw() { background(220); speed = slider.value(); // Draw the three circular sections. fill(color_1.color()); arc(200, 200, 100, 100, start, start + 2*PI/3); fill(color_2.color()); arc(200, 200, 100, 100, start + 2*PI/3, start + 4*PI/3); fill(color_3.color()); arc(200, 200, 100, 100, start + 4*PI/3, start); // Update the start point to turn in the next frame. start += speed*PI/180; } Stepping feet # let checkbox; var barsColor; var start, speedSlider, direction; const feetHeight = 25, feetWidth = 80; function setup() { createCanvas(700, 300); start = 0; noStroke(); // Checkbox to toggle the background. checkbox = createCheckbox(\u0026#39;background\u0026#39;, true); checkbox.changed(backgroundCheckbox); // Start with the bars being drawn. barsColor = color(\u0026#39;black\u0026#39;); direction = 1; // Slider for the feet speed. speedSlider = createSlider(0, 100, 25); speedSlider.position(10, height + 20); speedSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); } function draw() { background(220); const number_of_bars = 40; // Draw the bars using the color from the checkbox. for( var i = 0 ; i \u0026lt; number_of_bars ; i ++ ){ if( i%2 == 0 ) fill(barsColor); else fill(\u0026#39;white\u0026#39;); var x = (width/number_of_bars) * i; rect(x, 0, width/number_of_bars, height); } // Draw the feet. fill(\u0026#39;yellow\u0026#39;); rect(start, 100, feetWidth, feetHeight); fill(\u0026#39;blue\u0026#39;); rect(start, 200, feetWidth, feetHeight); // Update the position of the feet. var speed = speedSlider.value() / 100 * 2; // Update the direction if necessary. if( start + feetWidth + speed * direction \u0026gt; width || start + speed * direction \u0026lt; 0 ) direction *= -1; start += speed * direction; } function backgroundCheckbox() { // If the chack box is active, draw the black bars. if (checkbox.checked()) { barsColor = color(\u0026#39;black\u0026#39;); } else { barsColor = color(\u0026#39;white\u0026#39;); } } Ebbinghaus Illusion # var r; var x1, y1, r1, mov1, number_of_circles_1; var x2, y2, r2, mov2, number_of_circles_2; var start = 0, angularSpeed; var circleAlpha; function setup() { createCanvas(600, 400); noStroke(); // Set the parameters for the circles x1 = 200; y1 = 200; x2 = 400; y2 = 200; r = 30; r1 = 60 r2 = 20; mov1 = 55; number_of_circles_1 = 5; mov2 = 30; number_of_circles_2 = 7; // Set the rotation speed. angularSpeed = 0.5 * PI/180; // Slider that set the opacity of the rotating circles. slider = createSlider(0, 100, 100); slider.position(10, 10); slider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); } function draw() { background(220); // Draw the center circles. fill(\u0026#39;orange\u0026#39;); circle(x1, y1, r); circle(x2, y2, r); // Set the color for the rotating circles using the alpha from the slider. fill(`rgba(0,0,255,${slider.value()/100})`); // Draw the big rotating circles. var step = 2*PI / number_of_circles_1; for(var i = 0 ; i \u0026lt; number_of_circles_1 ; i++) { var alpha = start + step*i; var curr_x = x1 + mov1 * cos(alpha); var curr_y = y1 + mov1 * sin(alpha); circle(curr_x, curr_y, r1); } // Draw the small rotating circles. step = 2*PI / number_of_circles_2; for(var i = 0 ; i \u0026lt; number_of_circles_2 ; i++) { var alpha = start + step*i; var curr_x = x2 + mov2 * cos(alpha); var curr_y = y2 + mov2 * sin(alpha); circle(curr_x, curr_y, r2); } // Update the start point to rotate the circles. start += angularSpeed; } Conclusions \u0026amp; future work # Stroboscopic Artifacts # It is very important to take into account the particularities of our color and movement perception when working with computer graphics. Specifically, the limitations and design of our display technology can impact and fundamentaly change how our animations are perceived.\nStepping feet # Movement illusions like this are an important remainder that our perception of movement and its timing is heavuly dependent on the background, and therefore should be tested and observed with in the required context to obtain the desired perception. This illusion could possibly be used as means to accentuate certain movements, specialy in comparison to the movement of other objects in the scene.\nEbbinghaus Illusion # Our perception of size is heavly skewed by the context. With this knowledge, we can make certain objects in our scene be perceived as smaller of bigger in comparison by using artifacts of this kind. In this way we can draw focus to certain elements we want to make more noticeable.\nSources # 148 Optical Illusions \u0026amp; Visual Phenomena + Explanations by Michael Bach\nStroboscopic Artifacts “Stepping feet” Motion Illusion Ebbinghaus Illusion "}]